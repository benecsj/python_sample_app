
======================================================================
                 üß™ C to PlantUML Converter Test Suite                 
======================================================================
Working directory: /workspace
Python version: 3.13.3 (main, Apr  8 2025, 19:55:40) [GCC 14.2.0]
Project root: /workspace

--------------------------------------------------
              Checking Dependencies               
--------------------------------------------------
‚ùå pytest is not available
‚ùå coverage is not available
‚ö†Ô∏è  Missing dependencies: pytest, coverage
‚ÑπÔ∏è  Install with: pip install pytest coverage

--------------------------------------------------
           Running Tests with unittest            
--------------------------------------------------
test_generate_command_isolation_error_handling (feature.test_cli_feature_comprehensive.TestCLIFeatureComprehensive.test_generate_command_isolation_error_handling)
Test generate command isolation error handling through the CLI interface ... ok
test_generate_fallback_to_model (feature.test_cli_feature_comprehensive.TestCLIFeatureComprehensive.test_generate_fallback_to_model)
Test generate command fallback to model.json through the CLI interface ... ok
test_generate_prefers_transformed_model (feature.test_cli_feature_comprehensive.TestCLIFeatureComprehensive.test_generate_prefers_transformed_model)
Test generate command preferring transformed model through the CLI interface ... ok
test_parse_only_command (feature.test_cli_feature_comprehensive.TestCLIFeatureComprehensive.test_parse_only_command)
Test parse-only command through the CLI interface ... ok
test_transform_only_command (feature.test_cli_feature_comprehensive.TestCLIFeatureComprehensive.test_transform_only_command)
Test transform-only command through the CLI interface ... ok
test_full_workflow_default_mode (feature.test_cli_modes_comprehensive.TestCLIModesComprehensive.test_full_workflow_default_mode)
Test full workflow default mode through the CLI interface ... ok
test_generate_mode_fallback_to_model (feature.test_cli_modes_comprehensive.TestCLIModesComprehensive.test_generate_mode_fallback_to_model)
Test generate mode fallback to model.json through the CLI interface ... ok
test_generate_mode_isolation_error_handling (feature.test_cli_modes_comprehensive.TestCLIModesComprehensive.test_generate_mode_isolation_error_handling)
Test generate mode isolation error handling through the CLI interface ... ok
test_generate_mode_prefers_transformed_model (feature.test_cli_modes_comprehensive.TestCLIModesComprehensive.test_generate_mode_prefers_transformed_model)
Test generate mode prefers transformed model through the CLI interface ... ok
test_parse_mode_only_generates_model (feature.test_cli_modes_comprehensive.TestCLIModesComprehensive.test_parse_mode_only_generates_model)
Test parse mode only generates model.json through the CLI interface ... ok
test_transform_mode_generates_transformed_model (feature.test_cli_modes_comprehensive.TestCLIModesComprehensive.test_transform_mode_generates_transformed_model)
Test transform mode generates model_transformed.json through the CLI interface ... ok
test_cross_file_type_dependencies (feature.test_component_features_comprehensive.TestComponentFeaturesComprehensive.test_cross_file_type_dependencies)
Test cross-file type dependencies through the CLI interface ... ok
test_generator_complex_relationships (feature.test_component_features_comprehensive.TestComponentFeaturesComprehensive.test_generator_complex_relationships)
Test PlantUML generation with complex relationships through the CLI interface ... ok
test_generator_typedef_relationships (feature.test_component_features_comprehensive.TestComponentFeaturesComprehensive.test_generator_typedef_relationships)
Test PlantUML generation with typedef relationships through the CLI interface ... ok
test_generator_union_support (feature.test_component_features_comprehensive.TestComponentFeaturesComprehensive.test_generator_union_support)
Test PlantUML generation with union definitions through the CLI interface ... ok
test_parser_complex_typedefs_parsing (feature.test_component_features_comprehensive.TestComponentFeaturesComprehensive.test_parser_complex_typedefs_parsing)
Test parsing complex typedef relationships through the CLI interface ... ok
test_parser_function_pointers_parsing (feature.test_component_features_comprehensive.TestComponentFeaturesComprehensive.test_parser_function_pointers_parsing)
Test parsing function pointer definitions through the CLI interface ... ok
test_parser_unions_parsing (feature.test_component_features_comprehensive.TestComponentFeaturesComprehensive.test_parser_unions_parsing)
Test parsing union definitions through the CLI interface ... ok
test_project_structure_analysis (feature.test_component_features_comprehensive.TestComponentFeaturesComprehensive.test_project_structure_analysis)
Test project structure analysis through the CLI interface ... ok
test_recursive_include_handling (feature.test_component_features_comprehensive.TestComponentFeaturesComprehensive.test_recursive_include_handling)
Test recursive include handling through the CLI interface ... ok
test_crypto_filter_pattern_functionality (feature.test_crypto_filter_pattern_comprehensive.TestCryptoFilterPatternComprehensive.test_crypto_filter_pattern_functionality)
Test crypto filter pattern functionality through the CLI interface ... ok
test_crypto_filter_usecase_functionality (feature.test_crypto_filter_usecase_comprehensive.TestCryptoFilterUsecaseComprehensive.test_crypto_filter_usecase_functionality)
Test crypto filter usecase functionality through the CLI interface ... ok
test_invalid_config_errors (feature.test_error_handling_comprehensive.TestErrorHandlingComprehensive.test_invalid_config_errors)
Test various invalid configuration scenarios ... ok
test_invalid_source_folder_errors (feature.test_error_handling_comprehensive.TestErrorHandlingComprehensive.test_invalid_source_folder_errors)
Test various invalid source folder scenarios ... ok
test_partial_failure_scenarios (feature.test_error_handling_comprehensive.TestErrorHandlingComprehensive.test_partial_failure_scenarios)
Test scenarios where some operations fail but others succeed ... ok
test_basic_include_processing_workflow (feature.test_include_processing.TestIncludeProcessingBasicFeaturesCLI.test_basic_include_processing_workflow)
Test basic include processing workflow from parsing to generation through CLI. ... ok
test_c_to_h_relationships (feature.test_include_processing.TestIncludeProcessingBasicFeaturesCLI.test_c_to_h_relationships)
Test feature-level C to H file relationships through CLI. ... ok
test_header_to_header_relationships (feature.test_include_processing.TestIncludeProcessingBasicFeaturesCLI.test_header_to_header_relationships)
Test feature-level header to header relationships through CLI. ... ok
test_circular_include_detection (feature.test_include_processing.TestIncludeProcessingComplexFeaturesCLI.test_circular_include_detection)
Test circular include detection and handling through CLI. ... ok
test_complex_project_structure (feature.test_include_processing.TestIncludeProcessingComplexFeaturesCLI.test_complex_project_structure)
Test complex project structure with multiple layers of includes through CLI. ... ok
test_nested_directory_structure (feature.test_include_processing.TestIncludeProcessingComplexFeaturesCLI.test_nested_directory_structure)
Test nested directory structure with relative includes through CLI. ... ok
test_comprehensive_include_scenario (feature.test_include_processing.TestIncludeProcessingComprehensiveCLI.test_comprehensive_include_scenario)
Test comprehensive include processing scenario through CLI. ... ok
test_macro_propagation_through_includes (feature.test_include_processing.TestIncludeProcessingComprehensiveCLI.test_macro_propagation_through_includes)
Test macro propagation through include relationships through CLI. ... ok
test_typedef_relationships_across_files (feature.test_include_processing.TestIncludeProcessingComprehensiveCLI.test_typedef_relationships_across_files)
Test typedef relationships across multiple files through CLI. ... ok
test_dependency_ordering (feature.test_include_processing.TestIncludeProcessingDependenciesCLI.test_dependency_ordering)
Test that dependency ordering is preserved through CLI. ... ok
test_missing_dependency_handling (feature.test_include_processing.TestIncludeProcessingDependenciesCLI.test_missing_dependency_handling)
Test handling of missing dependencies through CLI. ... ok
test_transitive_dependencies (feature.test_include_processing.TestIncludeProcessingDependenciesCLI.test_transitive_dependencies)
Test transitive dependency resolution through CLI. ... ok
test_full_pipeline_with_includes (feature.test_include_processing.TestIncludeProcessingIntegrationCLI.test_full_pipeline_with_includes)
Test full pipeline with complex include relationships through CLI. ... ok
test_include_depth_control (feature.test_include_processing.TestIncludeProcessingIntegrationCLI.test_include_depth_control)
Test include depth control functionality through CLI. ... ok
test_include_filtering (feature.test_include_processing.TestIncludeProcessingIntegrationCLI.test_include_filtering)
Test include filtering functionality through CLI. ... ok
test_complete_workflow (feature.test_integration_cli.TestIntegrationCLI.test_complete_workflow)
End-to-end parse ‚Üí transform ‚Üí generate workflow ... ok
test_multiple_source_folders (feature.test_multiple_source_folders_cli.TestMultipleSourceFoldersCLI.test_multiple_source_folders) ... ok
test_transform_renaming (feature.test_transformer_features_cli.TestTransformerFeaturesCLI.test_transform_renaming)
Validate renaming transformations using transform-only ... ok
test_complete_system_integration (integration.test_comprehensive.TestComprehensiveIntegrationCLI.test_complete_system_integration)
Test complete system integration with real-world project structure ... ok
test_comprehensive_c_to_h_relationships (integration.test_comprehensive.TestComprehensiveIntegrationCLI.test_comprehensive_c_to_h_relationships)
Test comprehensive C to H file relationships with full integration ... ok
test_comprehensive_header_to_header_relationships (integration.test_comprehensive.TestComprehensiveIntegrationCLI.test_comprehensive_header_to_header_relationships)
Test comprehensive header-to-header relationships integration ... ok
test_comprehensive_typedef_relationships (integration.test_comprehensive.TestComprehensiveIntegrationCLI.test_comprehensive_typedef_relationships)
Test comprehensive typedef relationships integration ... ok
test_parser_tokenizer_integration (integration.test_comprehensive.TestComprehensiveIntegrationCLI.test_parser_tokenizer_integration)
Test parser-tokenizer integration with complex structures ... ok
test_complete_formatting_integration (integration.test_new_formatting_comprehensive.TestNewFormattingComprehensiveCLI.test_complete_formatting_integration)
Test all new formatting rules working together in a realistic scenario ... ok
test_mixed_project_comprehensive_formatting (integration.test_new_formatting_comprehensive.TestNewFormattingComprehensiveCLI.test_mixed_project_comprehensive_formatting)
Test formatting in a project with multiple files and cross-references ... ok
test_absolute_vs_relative_path_consistency (unit.test_absolute_path_bug_comprehensive.TestAbsolutePathBugComprehensive.test_absolute_vs_relative_path_consistency)
Test absolute vs relative path consistency through CLI interface. ... ok
test_mixed_path_styles_handling (unit.test_absolute_path_bug_comprehensive.TestAbsolutePathBugComprehensive.test_mixed_path_styles_handling)
Test mixed path styles handling through CLI interface. ... ok
test_relative_path_handling_in_include_tree (unit.test_absolute_path_bug_comprehensive.TestAbsolutePathBugComprehensive.test_relative_path_handling_in_include_tree)
Test that relative paths are handled correctly in include tree building through CLI interface. ... ok
test_subdirectory_includes_path_resolution (unit.test_absolute_path_bug_comprehensive.TestAbsolutePathBugComprehensive.test_subdirectory_includes_path_resolution)
Test subdirectory includes path resolution through CLI interface. ... ok
test_anonymous_processing_comprehensive (unit.test_anonymous_processing_comprehensive.TestAnonymousProcessingComprehensive.test_anonymous_processing_comprehensive)
Test comprehensive anonymous structure processing scenarios through the CLI interface ... ok
test_anonymous_struct_in_typedef (unit.test_anonymous_structure_comprehensive.TestAnonymousStructureComprehensive.test_anonymous_struct_in_typedef)
Test that anonymous structs within typedefs are correctly processed through CLI interface. ... ok
test_anonymous_unions_in_structs (unit.test_anonymous_structure_comprehensive.TestAnonymousStructureComprehensive.test_anonymous_unions_in_structs)
Test anonymous unions within structs through CLI interface. ... ok
test_nested_anonymous_structures (unit.test_anonymous_structure_comprehensive.TestAnonymousStructureComprehensive.test_nested_anonymous_structures)
Test that deeply nested anonymous structures are correctly processed through CLI interface. ... ok
test_config_comprehensive (unit.test_config_comprehensive.TestConfigComprehensive.test_config_comprehensive)
Test comprehensive configuration scenarios through the CLI interface ... ok
test_complex_struct_field_processing (unit.test_debug_field_parsing_comprehensive.TestDebugFieldParsingComprehensive.test_complex_struct_field_processing)
Test complex struct field processing through CLI interface. ... ok
test_nested_anonymous_structure_fields (unit.test_debug_field_parsing_comprehensive.TestDebugFieldParsingComprehensive.test_nested_anonymous_structure_fields)
Test nested anonymous structure field parsing through CLI interface. ... ok
test_nested_union_field_parsing (unit.test_debug_field_parsing_comprehensive.TestDebugFieldParsingComprehensive.test_nested_union_field_parsing)
Test nested union field parsing through CLI interface. ... ok
test_anonymous_structure_parsing (unit.test_debug_parsing_comprehensive.TestDebugParsingComprehensive.test_anonymous_structure_parsing)
Test parsing anonymous structures in typedefs through CLI interface ... ok
test_complex_union_parsing (unit.test_debug_parsing_comprehensive.TestDebugParsingComprehensive.test_complex_union_parsing)
Test parsing complex union with nested structures through CLI interface ... ok
test_nested_struct_parsing (unit.test_debug_parsing_comprehensive.TestDebugParsingComprehensive.test_nested_struct_parsing)
Test parsing nested struct definitions through CLI interface ... ok
test_configuration_extraction (unit.test_file_specific_configuration_comprehensive.TestFileSpecificConfigurationComprehensive.test_configuration_extraction)
Test configuration extraction functionality through CLI interface. ... ok
test_file_specific_include_depth (unit.test_file_specific_configuration_comprehensive.TestFileSpecificConfigurationComprehensive.test_file_specific_include_depth)
Test file-specific include depth configuration through CLI interface. ... ok
test_file_specific_include_filter (unit.test_file_specific_configuration_comprehensive.TestFileSpecificConfigurationComprehensive.test_file_specific_include_filter)
Test that file-specific include filters preserve includes arrays correctly through CLI interface. ... ok
test_include_filter_patterns (unit.test_file_specific_configuration_comprehensive.TestFileSpecificConfigurationComprehensive.test_include_filter_patterns)
Test include filter patterns validation through CLI interface. ... ok
test_generator_basic_plantuml (unit.test_generator_basic_plantuml.TestGeneratorBasicPlantuml.test_generator_basic_plantuml)
Run the test_generator_basic_plantuml test through CLI interface. ... ok
test_generator_comprehensive (unit.test_generator_comprehensive.TestGeneratorComprehensive.test_generator_comprehensive)
Test comprehensive generator scenarios through the CLI interface ... ok
test_exact_requested_format (unit.test_generator_exact_format_cli.TestGeneratorExactFormatCLI.test_exact_requested_format)
Test the exact format requested: public functions, empty line, private functions ... ok
test_format_with_parameters (unit.test_generator_exact_format_cli.TestGeneratorExactFormatCLI.test_format_with_parameters)
Test the format works correctly with function parameters ... ok
test_function_grouping_with_empty_line_separation (unit.test_generator_grouping_cli.TestGeneratorGroupingCLI.test_function_grouping_with_empty_line_separation)
Test that public and private functions are grouped with empty line separation ... ok
test_global_grouping_with_empty_line_separation (unit.test_generator_grouping_cli.TestGeneratorGroupingCLI.test_global_grouping_with_empty_line_separation)
Test that public and private globals are grouped with empty line separation ... ok
test_mixed_grouping_comprehensive (unit.test_generator_grouping_cli.TestGeneratorGroupingCLI.test_mixed_grouping_comprehensive)
Test grouping works correctly with both functions and globals ... ok
test_include_tree_comprehensive (unit.test_generator_include_tree_cli.TestGeneratorIncludeTreeCLI.test_include_tree_comprehensive)
Test comprehensive include tree generation with multiple files and deep includes ... ok
test_include_tree_with_absolute_paths (unit.test_generator_include_tree_cli.TestGeneratorIncludeTreeCLI.test_include_tree_with_absolute_paths)
Test that include relationships work correctly with absolute paths ... ok
test_duplicate_include_handling (unit.test_generator_includes_comprehensive.TestGeneratorIncludesComprehensive.test_duplicate_include_handling)
Test handling of duplicate include relationships through CLI interface ... ok
test_generator_complex_typedef_names (unit.test_generator_naming_comprehensive.TestGeneratorNamingComprehensive.test_generator_complex_typedef_names)
Test that complex typedef names are handled correctly ... ok
test_generator_edge_case_names (unit.test_generator_naming_comprehensive.TestGeneratorNamingComprehensive.test_generator_edge_case_names)
Test edge cases in naming conventions ... ok
test_generator_file_naming_conventions (unit.test_generator_naming_comprehensive.TestGeneratorNamingComprehensive.test_generator_file_naming_conventions)
Test that file UML IDs follow the correct naming conventions ... ok
test_generator_typedef_naming_conventions (unit.test_generator_naming_comprehensive.TestGeneratorNamingComprehensive.test_generator_typedef_naming_conventions)
Test that typedef UML IDs follow the correct naming conventions ... ok
test_alias_formatting_with_typedef_stereotype_and_alias_prefix (unit.test_generator_new_formatting_cli.TestGeneratorNewFormattingCLI.test_alias_formatting_with_typedef_stereotype_and_alias_prefix)
Test that typedef aliases use <<typedef>> stereotype with ALIAS_ prefix ... ok
test_complex_typedef_combination (unit.test_generator_new_formatting_cli.TestGeneratorNewFormattingCLI.test_complex_typedef_combination)
Test complex combination of struct, enum, union, and typedef in same file ... ok
test_enum_formatting_with_enumeration_stereotype (unit.test_generator_new_formatting_cli.TestGeneratorNewFormattingCLI.test_enum_formatting_with_enumeration_stereotype)
Test that enum types use <<enumeration>> stereotype with #LightYellow ... ok
test_function_pointer_formatting_with_function_pointer_stereotype (unit.test_generator_new_formatting_cli.TestGeneratorNewFormattingCLI.test_function_pointer_formatting_with_function_pointer_stereotype)
Test that function pointer typedefs use <<function pointer>> stereotype ... ok
test_public_private_visibility_logic (unit.test_generator_new_formatting_cli.TestGeneratorNewFormattingCLI.test_public_private_visibility_logic)
Test that globals and functions are marked as public if present in headers, private otherwise ... ok
test_struct_formatting_with_struct_stereotype (unit.test_generator_new_formatting_cli.TestGeneratorNewFormattingCLI.test_struct_formatting_with_struct_stereotype)
Test that struct types use <<struct>> stereotype with + prefix for fields ... ok
test_union_formatting_with_union_stereotype (unit.test_generator_new_formatting_cli.TestGeneratorNewFormattingCLI.test_union_formatting_with_union_stereotype)
Test that union types use <<union>> stereotype with + prefix for fields ... ok
test_function_visibility_private_when_not_in_header (unit.test_generator_visibility_logic.TestGeneratorVisibilityLogicCLI.test_function_visibility_private_when_not_in_header)
Test that functions not present in headers are marked as - (private) ... ok
test_function_visibility_public_when_in_header (unit.test_generator_visibility_logic.TestGeneratorVisibilityLogicCLI.test_function_visibility_public_when_in_header)
Test that functions present in headers are marked as + (public) ... ok
test_global_visibility_private_when_not_in_header (unit.test_generator_visibility_logic.TestGeneratorVisibilityLogicCLI.test_global_visibility_private_when_not_in_header)
Test that globals not present in headers are marked as - (private) ... ok
test_global_visibility_public_when_in_header (unit.test_generator_visibility_logic.TestGeneratorVisibilityLogicCLI.test_global_visibility_public_when_in_header)
Test that globals present in headers are marked as + (public) ... ok
test_mixed_visibility_comprehensive (unit.test_generator_visibility_logic.TestGeneratorVisibilityLogicCLI.test_mixed_visibility_comprehensive)
Test mixed visibility scenarios with both public and private elements ... ok
test_no_headers_all_private (unit.test_generator_visibility_logic.TestGeneratorVisibilityLogicCLI.test_no_headers_all_private)
Test that without headers, all elements are marked as - (private) ... ok
test_global_parsing_comprehensive (unit.test_global_parsing_comprehensive.TestGlobalParsingComprehensive.test_global_parsing_comprehensive)
Test comprehensive global parsing scenarios through the CLI interface ... ok
test_include_filtering_comprehensive (unit.test_include_filtering_comprehensive.TestIncludeFilteringComprehensive.test_include_filtering_comprehensive)
Test comprehensive include filtering scenarios through the CLI interface ... ok
test_basic_include_processing (unit.test_include_processing_comprehensive.TestIncludeProcessingComprehensive.test_basic_include_processing)
Test basic include file processing through CLI interface ... ok
test_nested_structures_puml (unit.test_nested_structures_puml.TestNestedStructuresPuml.test_nested_structures_puml)
Test nested structures puml through the CLI interface ... ok
test_parser_complete (unit.test_parser_complete.TestParserComplete.test_parser_complete)
Test parsing a complete C file with all elements through the CLI interface ... ok
test_parser_encoding (unit.test_parser_encoding.TestParserEncoding.test_parser_encoding)
Test parsing files with various encodings through the CLI interface ... ok
test_parser_enum_simple (unit.test_parser_enum_comprehensive.TestParserEnumComprehensive.test_parser_enum_simple)
Test parsing simple enum definitions through the CLI interface ... ok
test_parser_enum_typedef (unit.test_parser_enum_comprehensive.TestParserEnumComprehensive.test_parser_enum_typedef)
Test parsing typedef enum definitions through the CLI interface ... ok
test_parser_enums (unit.test_parser_enums.TestParserEnums.test_parser_enums)
Test parsing enum definitions through the CLI interface ... ok
test_parser_functions_and_parameters_comprehensive (unit.test_parser_function_comprehensive.TestParserFunctionComprehensive.test_parser_functions_and_parameters_comprehensive) ... ok
test_parser_functions (unit.test_parser_functions.TestParserFunctions.test_parser_functions)
Test parsing function declarations through the CLI interface ... ok
test_parser_globals (unit.test_parser_globals.TestParserGlobals.test_parser_globals)
Test parsing global variables through the CLI interface ... ok
test_parser_includes (unit.test_parser_includes.TestParserIncludes.test_parser_includes)
Test parsing include statements through the CLI interface ... ok
test_parser_macros (unit.test_parser_macros.TestParserMacros.test_parser_macros)
Test parsing macro definitions through the CLI interface ... ok
test_parser_mixed_content (unit.test_parser_mixed_comprehensive.TestParserMixedComprehensive.test_parser_mixed_content)
Test parsing a file with mixed C language features through the CLI interface ... ok
test_nested_struct_preservation (unit.test_parser_nested_structures_comprehensive.TestParserNestedStructuresComprehensive.test_nested_struct_preservation)
Test that nested structs maintain their structure through CLI interface. ... ok
test_nested_structures_in_generated_puml (unit.test_parser_nested_structures_comprehensive.TestParserNestedStructuresComprehensive.test_nested_structures_in_generated_puml)
Test that nested structures appear correctly in generated PlantUML through CLI interface. ... ok
test_nested_union_preservation (unit.test_parser_nested_structures_comprehensive.TestParserNestedStructuresComprehensive.test_nested_union_preservation)
Test that nested unions maintain their structure through CLI interface. ... ok
test_parser_simple_c_file (unit.test_parser_simple_c_file.TestParserSimpleCFile.test_parser_simple_c_file)
Test parsing a simple C file through the CLI interface ... ok
test_parser_simple_struct (unit.test_parser_simple_struct.TestParserSimpleStruct.test_parser_simple_struct)
Test parsing a simple struct definition through the CLI interface ... ok
test_parser_structs (unit.test_parser_structs.TestParserStructs.test_parser_structs)
Test parsing struct definitions through the CLI interface ... ok
test_parser_typedef_struct (unit.test_parser_typedef_struct.TestParserTypedefStruct.test_parser_typedef_struct)
Test parsing typedef struct definitions through the CLI interface ... ok
test_parser_typedefs (unit.test_parser_typedefs.TestParserTypedefs.test_parser_typedefs)
Test parsing typedef declarations through the CLI interface ... ok
test_preprocessor_and_macros_comprehensive (unit.test_preprocessor_handling_comprehensive.TestPreprocessorHandlingComprehensive.test_preprocessor_and_macros_comprehensive)
Run the consolidated preprocessor and macros scenario ... ok
test_simple_c_file_parsing (unit.test_simple_c_file_parsing.TestSimpleCFileParsing.test_simple_c_file_parsing)
Test parsing a simple C file through the CLI interface ... ok
test_struct_and_nested_ordering_comprehensive (unit.test_struct_order_puml.TestStructOrderPuml.test_struct_and_nested_ordering_comprehensive) ... ok
test_tokenizer_comprehensive (unit.test_tokenizer_comprehensive.TestTokenizerComprehensive.test_tokenizer_comprehensive)
Run the consolidated tokenizer scenario ... ok
test_tokenizer_keywords (unit.test_tokenizer_keywords.TestTokenizerKeywords.test_tokenizer_keywords)
Test tokenizer keyword recognition through the CLI interface ... ok
test_transformer_basic (unit.test_transformer_basic.TestTransformerBasic.test_transformer_basic)
Test basic transformer functionality through the CLI interface ... ok
test_transformer_comprehensive_operations (unit.test_transformer_comprehensive.TestTransformerComprehensive.test_transformer_comprehensive_operations)
Test comprehensive transformer operations including all major transformation types ... ok
test_transformer_file_filtering (unit.test_transformer_comprehensive.TestTransformerComprehensive.test_transformer_file_filtering)
Test transformer file filtering capabilities through CLI interface ... ok
test_transformer_include_processing (unit.test_transformer_comprehensive.TestTransformerComprehensive.test_transformer_include_processing)
Test transformer include processing and depth control through CLI interface ... ok
test_typedef_extraction_comprehensive (unit.test_typedef_extraction_comprehensive.TestTypedefExtractionComprehensive.test_typedef_extraction_comprehensive)
Run the consolidated typedef extraction scenario ... ok
test_verifier_comprehensive (unit.test_verifier_comprehensive.TestVerifierComprehensive.test_verifier_comprehensive)
Test comprehensive verifier scenarios through the CLI interface ... ok
test_verifier_valid_model (unit.test_verifier_valid_model.TestVerifierValidModel.test_verifier_valid_model)
Run the test_verifier_valid_model test through CLI interface. ... ok

----------------------------------------------------------------------
Ran 131 tests in 6.898s

OK

--------------------------------------------------
                 unittest Summary                 
--------------------------------------------------
Tests run: 131
Failures: 0
Errors: 0

======================================================================
                       üéØ Test Execution Summary                       
======================================================================
Duration: 6.93 seconds
‚úÖ All tests passed!
