name: Test Suite with Coverage Reports

on:
  # Automatic triggers
  pull_request:
    branches: [ main, master ]
    types: [closed]  # Trigger when PR is closed (merged)

  # Manual trigger
  workflow_dispatch:
    inputs:
      coverage_format:
        description: 'Coverage report format'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - html
        - xml
        - json
      test_verbosity:
        description: 'Test output verbosity (0-2)'
        required: false
        default: '1'
        type: choice
        options:
        - '0'
        - '1'
        - '2'

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN || github.token }}
        fetch-depth: 0  # Full history for better coverage analysis

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📋 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt

        # Ensure coverage tools are available
        pip install coverage[toml] pytest-cov pytest-html pytest-json-report

    - name: 🧪 Run comprehensive test suite with coverage
      run: |
        echo "🧪 Running comprehensive test suite with coverage analysis..."

        # Create reports directory
        mkdir -p tests/reports

        # Set verbosity from input or default
        VERBOSITY="${{ github.event.inputs.test_verbosity || '1' }}"
        COVERAGE_FORMAT="${{ github.event.inputs.coverage_format || 'all' }}"

        echo "📊 Test verbosity: $VERBOSITY"
        echo "📈 Coverage format: $COVERAGE_FORMAT"

                          # First, run tests with coverage using coverage directly for better control
         echo "🧪 Running tests with coverage..."
         coverage erase
         coverage run -m unittest discover tests -v

         # Save test results separately (re-run without coverage for clean output)
         echo "📋 Generating clean test output..."
         python3 run_all_tests.py --verbosity $VERBOSITY --stats > tests/reports/test-results.txt 2>&1 || true

         # Generate coverage reports in multiple formats
         echo "📈 Generating coverage reports..."

         if [ "$COVERAGE_FORMAT" = "all" ] || [ "$COVERAGE_FORMAT" = "html" ]; then
           echo "📊 Generating detailed HTML coverage report..."
           coverage html -d tests/reports/coverage-html --title "Code Coverage Report" --show-contexts
           echo "✅ HTML coverage report generated in tests/reports/coverage-html/"
         fi

         if [ "$COVERAGE_FORMAT" = "all" ] || [ "$COVERAGE_FORMAT" = "xml" ]; then
           coverage xml -o tests/reports/coverage.xml
           echo "✅ XML coverage report generated"
         fi

         if [ "$COVERAGE_FORMAT" = "all" ] || [ "$COVERAGE_FORMAT" = "json" ]; then
           coverage json -o tests/reports/coverage.json
           echo "✅ JSON coverage report generated"
         fi

         # Generate text summary
         coverage report > tests/reports/coverage-summary.txt

         # Generate detailed coverage data
         coverage report --show-missing > tests/reports/coverage-detailed.txt

         # Generate annotated coverage report with line-by-line analysis
         echo "📊 Generating annotated coverage report..."
         coverage annotate -d tests/reports/coverage-annotated
         echo "✅ Annotated coverage report generated in tests/reports/coverage-annotated/"

         # Create a comprehensive coverage index page
         echo "📋 Creating coverage reports index..."
         cat > tests/reports/coverage-index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coverage Reports Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .card { background: #f5f5f5; padding: 20px; margin: 15px 0; border-radius: 8px; }
        .card h3 { margin-top: 0; color: #333; }
        .card p { color: #666; margin: 10px 0; }
        .btn { background: #007cba; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; display: inline-block; }
        .btn:hover { background: #005a87; }
        .timestamp { color: #888; font-size: 0.9em; }
    </style>
</head>
<body>
    <h1>📊 Code Coverage Reports</h1>
    <p class="timestamp">Generated: $(date)</p>
    
    <div class="card">
        <h3>🌐 Interactive HTML Report</h3>
        <p>Complete coverage report with syntax highlighting and interactive features.</p>
        <a href="coverage-html/index.html" class="btn">View HTML Report</a>
    </div>
    
    <div class="card">
        <h3>📝 Annotated Source Files</h3>
        <p>Source code with coverage annotations showing covered/uncovered lines.</p>
        <a href="coverage-annotated/" class="btn">View Annotated Files</a>
    </div>
    
    <div class="card">
        <h3>📄 Text Reports</h3>
        <p>Coverage summary and detailed missing line information in text format.</p>
        <a href="coverage-summary.txt" class="btn">Summary</a>
        <a href="coverage-detailed.txt" class="btn">Detailed</a>
    </div>
    
    <div class="card">
        <h3>🧪 Test Execution Results</h3>
        <p>Complete test execution logs and results.</p>
        <a href="test-results.txt" class="btn">View Test Results</a>
    </div>
</body>
</html>
EOF
         echo "✅ Coverage reports index created at tests/reports/coverage-index.html"

        echo "📊 Coverage analysis complete"

    - name: 📊 Generate test execution summary
      run: |
        echo "📊 Generating test execution summary..."
        python3 tests/reports/generate_test_summary.py
        echo "📝 Test summary generated"

    - name: 📈 Upload coverage to Codecov (if available)
      uses: codecov/codecov-action@v3
      with:
        file: tests/reports/coverage.xml
        flags: unittests
        fail_ci_if_error: false  # Don't fail if codecov is not configured
        verbose: true

    - name: 📋 Display test results summary
      run: |
        echo "🏆 Test Execution Complete!"
        echo "================================"

        if [ -f tests/reports/coverage-summary.txt ]; then
          echo "📊 Coverage Summary:"
          echo "-------------------"
          cat tests/reports/coverage-summary.txt
          echo ""
        fi

        echo "📁 Generated Reports:"
        echo "--------------------"
        find tests/reports -type f -name "*" | sort
        echo ""

        echo "📏 Report Sizes:"
        echo "---------------"
        du -h tests/reports/* 2>/dev/null || true

    - name: 🔧 Validate and configure Git credentials
      if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
      run: |
        echo "🔧 Setting up Git credentials..."
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

        # Check if PERSONAL_ACCESS_TOKEN is available for better authentication
        if [ -n "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
          echo "✅ Using Personal Access Token for authentication"
          git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}
        else
          echo "⚠️ Personal Access Token not configured, using GitHub token"
          echo "💡 For more reliable authentication, add a Personal Access Token as PERSONAL_ACCESS_TOKEN secret"
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}
        fi

    - name: 🚀 Commit and push coverage reports
      if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main')
      run: |
        echo "🚀 Committing coverage reports to repository..."

        # Add coverage reports
        git add tests/reports/

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "ℹ️ No changes to commit"
        else
          # Create commit with timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT_SHA="${{ github.sha }}"
          PYTHON_VERSION="${{ matrix.python-version }}"
          WORKFLOW_NAME="${{ github.workflow }}"
          RUN_NUMBER="${{ github.run_number }}"
          EVENT_NAME="${{ github.event_name }}"

          # Create detailed commit message
          {
            echo "Update test coverage reports"
            echo ""
            echo "Generated: $TIMESTAMP"
            echo "Commit: $COMMIT_SHA"
            echo "Python: $PYTHON_VERSION"
            echo "Workflow: $WORKFLOW_NAME #$RUN_NUMBER"
            echo "Trigger: $EVENT_NAME"
            echo ""
            echo "Generated Reports:"
          } > /tmp/commit_msg

          # Add list of generated files
          find tests/reports -type f -name "*" | sort | sed 's/^/- /' >> /tmp/commit_msg

          echo "" >> /tmp/commit_msg
          echo "- Updated coverage analysis" >> /tmp/commit_msg
          echo "- Refreshed test execution reports" >> /tmp/commit_msg
          echo "- Generated by GitHub Actions" >> /tmp/commit_msg

          # Commit with detailed message
          git commit -F /tmp/commit_msg

          # Push changes
          git push origin "${{ github.ref }}"
          echo "✅ Coverage reports committed and pushed"
        fi

    - name: 📤 Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if tests failed
      with:
        name: test-coverage-reports-py${{ matrix.python-version }}
        path: tests/reports/
        retention-days: 30

    - name: 🎯 Test Results Summary
      if: always()
      run: |
        echo "## 🎯 Final Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f tests/reports/coverage-html/index.html ]; then
          echo "📊 HTML reports generated successfully!" >> $GITHUB_STEP_SUMMARY
          echo "- [Coverage Reports Dashboard](tests/reports/coverage-index.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Interactive HTML Coverage Report](tests/reports/coverage-html/index.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Annotated Source Files](tests/reports/coverage-annotated/)" >> $GITHUB_STEP_SUMMARY
          if [ -f tests/reports/index.html ]; then
            echo "- [Test Reports Dashboard](tests/reports/index.html)" >> $GITHUB_STEP_SUMMARY
          fi
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Available Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- HTML test and coverage reports uploaded as workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage reports committed to repository (main branch only)" >> $GITHUB_STEP_SUMMARY
