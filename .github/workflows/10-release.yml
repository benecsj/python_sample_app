name: 10. Release

on:
  workflow_dispatch:
    inputs:
      release_suffix:
        description: 'Optional suffix to append to tag name (e.g., "beta", "rc1")'
        required: false
        default: ''
        type: string
      release_notes:
        description: 'Additional release notes to include in the release body'
        required: false
        default: ''
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: "10.01 Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "10.02 Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: "10.03 Configure Git"
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: "10.04 Generate release date and tag"
        id: release_date
        run: |
          RELEASE_DATE=$(date +%Y-%m-%d)
          echo "date=${RELEASE_DATE}" >> $GITHUB_OUTPUT
          TAG_NAME="v${RELEASE_DATE}"
          if [ -n "${{ github.event.inputs.release_suffix }}" ]; then
            TAG_NAME="${TAG_NAME}-${{ github.event.inputs.release_suffix }}"
          fi
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: "10.05 Update release branch"
        run: |
          if git ls-remote --heads origin release | grep -q release; then
            echo "üìã Checking out existing release branch..."
            git checkout release
            git pull origin release
          else
            echo "üìã Creating new release branch from main..."
            git checkout -b release
          fi
          echo "üìÅ Current release branch contents:"
          ls -la
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          echo "üìÅ After cleanup:"
          ls -la

      - name: "10.06 Copy release files from main"
        run: |
          git fetch origin main
          git checkout origin/main -- src/python_sample_app/
          git checkout origin/main -- main.py
          git checkout origin/main -- README.md
          git checkout origin/main -- pyproject.toml
          echo "üìÅ Release files copied:"
          ls -la
          echo "üìÅ Contents of src/:"
          ls -la src/
          git add .

      - name: "10.07 Update version in pyproject.toml"
        run: |
          VERSION=$(date +%Y.%-m.%-d)
          echo "üìù Updating version to: $VERSION"
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          echo "üìÑ Updated pyproject.toml version:"
          grep "^version = " pyproject.toml
          git add pyproject.toml

      - name: "10.08 Generate release notes file"
        run: |
          cat > release-note.md << 'EOF'
          # Release Notes - ${{ steps.release_date.outputs.tag }}

          ## Release Information
          - **Tag**: ${{ steps.release_date.outputs.tag }}
          - **Date**: ${{ steps.release_date.outputs.date }}
          - **Branch**: release

          ## Description
          This release contains the python_sample_app with the following components:
          - Source code (`src/python_sample_app/`)
          - Main application entry point (`main.py`)
          - Documentation (`README.md`)
          - Package configuration (`pyproject.toml`)

          ## Files Included
          - `src/python_sample_app/` - Core library
          - `main.py` - Application entry point
          - `README.md` - Project documentation
          - `pyproject.toml` - Python package configuration
          - `release-note.md` - This release notes file

          ## Additional Notes
          ${{ github.event.inputs.release_notes }}
          EOF
          echo "üìù Generated release-note.md:"
          cat release-note.md
          git add release-note.md

      - name: "10.09 Verify copied files"
        run: |
          echo "üìÅ Verifying copied files..."
          ls -la
          echo "üìÅ Contents of src/:"
          ls -la src/ || echo "src/ directory not found"
          echo "üìÅ Contents of src/python_sample_app:"
          ls -la src/python_sample_app/ || echo "src/python_sample_app/ directory not found"
          echo "üìÑ Main files:"
          ls -la main.py README.md pyproject.toml release-note.md || echo "Some main files not found"
          echo "üîç Git status after file operations:"
          git status

      - name: "10.10 Commit and push release"
        run: |
          if git diff --staged --quiet && [ -z "$(git status --porcelain)" ]; then
            echo "‚ÑπÔ∏è No changes detected, creating empty commit to update release branch"
            git commit --allow-empty -m "Release ${{ steps.release_date.outputs.tag }} - $(date)"
          else
            echo "‚úÖ Changes detected, committing release files"
            git commit -m "Release ${{ steps.release_date.outputs.tag }} - $(date)"
          fi
          echo "üì§ Pushing release branch to origin"
          git push origin release

      - name: "10.11 Create and push tag"
        id: create_tag
        run: |
          TAG_NAME="${{ steps.release_date.outputs.tag }}"
          if git tag -l "$TAG_NAME" | grep -q "$TAG_NAME"; then
            echo "‚ö†Ô∏è Tag $TAG_NAME already exists locally"
            if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
              echo "‚ö†Ô∏è Tag $TAG_NAME also exists on remote"
              TIMESTAMP=$(date +%H%M%S)
              NEW_TAG_NAME="${TAG_NAME}-${TIMESTAMP}"
              echo "üìù Creating new tag: $NEW_TAG_NAME"
              git tag -a "$NEW_TAG_NAME" -m "Release $NEW_TAG_NAME"
              git push origin "$NEW_TAG_NAME"
              echo "tag=$NEW_TAG_NAME" >> $GITHUB_OUTPUT
            else
              echo "üìù Tag exists locally but not on remote, pushing existing tag"
              git push origin "$TAG_NAME"
            fi
          else
            echo "üìù Creating new tag: $TAG_NAME"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
          fi

      - name: "10.12 Create GitHub Release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_NOTES="## Release ${{ steps.release_date.outputs.tag }}

          This release contains:
          - Source code (\`src/python_sample_app/\`)
          - Main application entry point (\`main.py\`)
          - Documentation (\`README.md\`)
          - Package configuration (\`pyproject.toml\`)"
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            RELEASE_NOTES="${RELEASE_NOTES}

          ### Additional Notes

          ${{ github.event.inputs.release_notes }}"
          fi
          ACTUAL_TAG="${{ steps.create_tag.outputs.tag || steps.release_date.outputs.tag }}"
          gh release create "$ACTUAL_TAG" \
            --title "Release $ACTUAL_TAG" \
            --notes "$RELEASE_NOTES" \
            --target release