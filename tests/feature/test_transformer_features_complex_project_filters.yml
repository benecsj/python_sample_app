# Test metadata
test:
  name: "Transformer Features - Complex Project with Filters"
  description: "Test transforming a complex project with various filters through CLI"
  category: "feature"
  id: "3001"

---
# Source files
source_files:
  main.c: |
    #include <stdio.h>
    #include <stdlib.h>
    #include "utils.h"
    #include "config.h"
    
    #define MAX_SIZE 100
    #define DEBUG_MODE 1
    #define LEGACY_FLAG 0
    
    typedef struct {
        int id;
        char name[64];
        float value;
    } DataStruct;
    
    typedef struct {
        int legacy_id;
        char legacy_data[32];
    } LegacyStruct;
    
    int global_counter = 0;
    int legacy_var = 999;
    
    void process_data(DataStruct* data) {
        data->value *= 2.0;
    }
    
    void legacy_function() {
        printf("Legacy function\n");
    }
    
    int main() {
        DataStruct data = {1, "test", 3.14};
        process_data(&data);
        return 0;
    }

  utils.h: |
    #ifndef UTILS_H
    #define UTILS_H
    
    void utility_function();
    void legacy_util();
    
    #endif

  config.h: |
    #ifndef CONFIG_H
    #define CONFIG_H
    
    #define CONFIG_VERSION "1.0"
    
    typedef struct {
        char name[50];
        int timeout;
    } Config;
    
    void load_config();
    
    #endif

---
# Configuration with complex transformations
config.json: |
  {
    "project_name": "transformer_features_complex",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 2,
    "file_filters": {
      "include": ["*.c", "*.h"],
      "exclude": ["*test*"]
    },
    "transformations": {
      "remove": {
        "functions": ["legacy_.*"],
        "structs": ["Legacy.*"],
        "globals": ["legacy_.*"]
      },
      "rename": {
        "functions": {
          "process_(.*)": "handle_$1"
        },
        "structs": {
          "DataStruct": "ProcessedData"
        }
      }
    }
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    max_execution_time: 30.0
  
  model:
    validate_structure: true
    expected_files: ["main.c", "utils.h", "config.h"]
    
    # Validate remove operations worked
    functions_not_exist: ["legacy_function"]
    structs_not_exist: ["LegacyStruct"]
    
    # Validate rename operations worked
    functions_exist: ["main", "handle_data", "utility_function", "load_config"]
    structs_exist: ["ProcessedData", "Config"]
    
    element_counts:
      functions: 4  # main, handle_data, utility_function, load_config
      structs: 2   # ProcessedData, Config

  puml:
    syntax_valid: true
    file_count: 1
    
    files:
      main.puml:
        contains_elements: ["main", "handle_data", "ProcessedData", "Config"]
        contains_lines: [
          "class \"main\" as MAIN <<source>> #LightBlue",
          "class \"utils\" as HEADER_UTILS <<header>> #LightGreen",
          "class \"config\" as HEADER_CONFIG <<header>> #LightGreen",
          "class \"ProcessedData\" as TYPEDEF_PROCESSEDDATA <<struct>> #LightYellow",
          "class \"Config\" as TYPEDEF_CONFIG <<struct>> #LightYellow",
          "MAIN --> HEADER_UTILS : <<include>>",
          "MAIN --> HEADER_CONFIG : <<include>>",
          "+ int main",
          "+ void handle_data"
        ]
        not_contains_lines: [
          "legacy_function",
          "LegacyStruct",
          "legacy_var",
          "process_data"  # should be renamed to handle_data
        ]