scenarios:
  - id: "c_to_h_relationships"
    test: { name: "Comprehensive C to H Relationships Integration", category: "integration", id: "2001" }
    source_files:
      src/app.c: |
        #include "core/engine.h"
        #include "ui/window.h"
        #include "utils/logger.h"

        int main() {
            Engine* engine = engine_init();
            Window* window = window_create(800, 600, "App");
            log_info("Application started");
            while (engine_is_running(engine)) { window_update(window); engine_update(engine); }
            window_destroy(window); engine_cleanup(engine); return 0;
        }
      src/core/engine.h: |
        #ifndef ENGINE_H
        #define ENGINE_H
        #include "../graphics/renderer.h"
        #include "../audio/sound.h"
        typedef struct { Renderer* renderer; SoundSystem* audio; int running; double delta_time; } Engine;
        Engine* engine_init(); void engine_update(Engine* engine); int engine_is_running(Engine* engine); void engine_cleanup(Engine* engine);
        #endif
      src/ui/window.h: |
        #ifndef WINDOW_H
        #define WINDOW_H
        #include "../graphics/context.h"
        #include "../input/keyboard.h"
        typedef struct { GraphicsContext* context; KeyboardState* keyboard; int width, height; char* title; } Window;
        Window* window_create(int width, int height, const char* title); void window_update(Window* window); void window_destroy(Window* window);
        #endif
      src/graphics/renderer.h: |
        #ifndef RENDERER_H
        #define RENDERER_H
        #include "context.h"
        #include "shader.h"
        typedef struct { GraphicsContext* context; Shader* current_shader; int frame_count; } Renderer;
        #endif
      src/graphics/context.h: |
        #ifndef CONTEXT_H
        #define CONTEXT_H
        typedef struct { void* native_handle; int api_version; int width, height; } GraphicsContext;
        #endif
      src/graphics/shader.h: |
        #ifndef SHADER_H
        #define SHADER_H
        typedef struct { unsigned int program_id; char* vertex_source; char* fragment_source; } Shader;
        #endif
      src/audio/sound.h: |
        #ifndef SOUND_H
        #define SOUND_H
        typedef struct { void* audio_device; float master_volume; } SoundSystem;
        #endif
      src/input/keyboard.h: |
        #ifndef KEYBOARD_H
        #define KEYBOARD_H
        typedef struct { int keys[256]; int key_count; } KeyboardState;
        #endif
      src/utils/logger.h: |
        #ifndef LOGGER_H
        #define LOGGER_H
        #include <stdio.h>
        void log_info(const char* message); void log_error(const char* message);
        #endif
    config.json: |
      {"project_name":"comprehensive_integration_test","source_folders":["src"],"output_dir":"./output","recursive_search":true,"include_depth":4,"file_filters":{"include":["*.c","*.h"],"exclude":[]}}
    assertions:
      execution: { exit_code: 0, output_files: ["model.json","model_transformed.json","app.puml"], max_execution_time: 60.0 }
      model: { validate_structure: true, element_counts: { functions: 10, structs: 7, includes: 10 } }
      puml: { syntax_valid: true, file_count: 1, files: { app.puml: { contains_elements: ["Engine","Window","main"], contains_lines: ["class \"Engine\" as TYPEDEF_ENGINE","class \"Window\" as TYPEDEF_WINDOW"] } } }

  - id: "header_to_header_relationships"
    test: { name: "Comprehensive Header to Header Relationships Integration", category: "integration", id: "2002" }
    source_files:
      math/vector.h: |
        #ifndef VECTOR_H
        #define VECTOR_H
        typedef struct { float x, y, z; } Vector3;
        Vector3 vector_add(Vector3 a, Vector3 b);
        #endif
      math/matrix.h: |
        #ifndef MATRIX_H
        #define MATRIX_H
        #include "vector.h"
        typedef struct { float m[16]; } Matrix4;
        Matrix4 matrix_translate(Vector3 translation);
        #endif
      graphics/transform.h: |
        #ifndef TRANSFORM_H
        #define TRANSFORM_H
        #include "../math/matrix.h"
        #include "../math/vector.h"
        typedef struct { Vector3 position; Vector3 rotation; Vector3 scale; Matrix4 world_matrix; } Transform;
        #endif
      graphics/camera.h: |
        #ifndef CAMERA_H
        #define CAMERA_H
        #include "transform.h"
        typedef struct { Transform transform; Matrix4 view_matrix; Matrix4 projection_matrix; float fov; } Camera;
        #endif
      main.c: |
        #include "graphics/camera.h"
        int main() { Camera camera; return 0; }
    config.json: |
      {"project_name":"header_relationships_test","source_folders":["."],"output_dir":"./output","recursive_search":true,"include_depth":4,"file_filters":{"include":["*.c","*.h"],"exclude":[]}}
    assertions:
      execution: { exit_code: 0, output_files: ["model.json","model_transformed.json","main.puml"], max_execution_time: 45.0 }
      model: { validate_structure: true, expected_files: ["main.c","vector.h","matrix.h","transform.h","camera.h"], element_counts: { functions: 3, structs: 4 } }
      puml: { syntax_valid: true, file_count: 1 }

  - id: "typedef_relationships"
    test: { name: "Comprehensive Typedef Relationships Integration", category: "integration", id: "2003" }
    source_files:
      main.c: |
        #include "database/models.h"
        int main() { User user = create_user("john", 25); Product product = create_product("laptop", 999.99); Order order = create_order(&user, &product); return 0; }
      database/models.h: |
        #ifndef MODELS_H
        #define MODELS_H
        #include "types.h"
        #include "relationships.h"
        typedef struct { UserId id; UserName name; Age age; Address address; } User;
        typedef struct { ProductId id; ProductName name; Price price; Category category; } Product;
        User create_user(const char* name, int age); Product create_product(const char* name, double price);
        #endif
      database/types.h: |
        #ifndef TYPES_H
        #define TYPES_H
        typedef unsigned int UserId; typedef unsigned int ProductId; typedef unsigned int OrderId; typedef char* UserName; typedef char* ProductName; typedef double Price; typedef int Age;
        typedef enum { ELECTRONICS, CLOTHING, BOOKS, OTHER } Category;
        typedef struct { char* street; char* city; char* zip_code; } Address;
        #endif
      database/relationships.h: |
        #ifndef RELATIONSHIPS_H
        #define RELATIONSHIPS_H
        #include "types.h"
        typedef struct { OrderId id; UserId user_id; ProductId product_id; int quantity; Price total_price; } Order;
        Order create_order(void* user, void* product);
        #endif
    config.json: |
      {"project_name":"typedef_relationships_test","source_folders":["."],"output_dir":"./output","recursive_search":true,"include_depth":3,"file_filters":{"include":["*.c","*.h"],"exclude":[]}}
    assertions:
      execution: { exit_code: 0, output_files: ["model.json","model_transformed.json","main.puml"], max_execution_time: 45.0 }
      model: { validate_structure: true, expected_files: ["main.c","models.h","types.h","relationships.h"], element_counts: { functions: 4, structs: 4, enums: 1 } }
      puml: { syntax_valid: true, file_count: 1 }

  - id: "parser_tokenizer_integration"
    test: { name: "Parser-Tokenizer Integration", category: "integration", id: "2004" }
    source_files:
      complex.h: |
        #define MAX_SIZE 1024
        #define STRINGIFY(x) #x
        #define CONCAT(a, b) a ## b
        #ifdef DEBUG
          #define LOG(msg) printf("DEBUG: %s\n", msg)
        #else
          #define LOG(msg)
        #endif
        typedef struct ComplexStruct { int field1; char* field2; struct { float nested_field1; double nested_field2; } nested_struct; enum { OPTION_A, OPTION_B = 5, OPTION_C } options; } ComplexStruct;
        typedef struct { char buffer[MAX_SIZE]; int size; } Buffer;
        #if defined(WINDOWS)
          typedef void* Handle;
        #elif defined(LINUX)
          typedef int Handle;
        #else
          typedef void* Handle;
        #endif
      functions.h: |
        #include "complex.h"
        int simple_function(void);
        static inline double complex_function(const char* input, size_t input_length, void (*callback)(int, char*), struct { int option1; float option2; } config) { return 0.0; }
        extern void* variadic_function(int count, ...);
        Buffer* create_buffer(int size); void destroy_buffer(Buffer* buffer);
      main.c: |
        #include "functions.h"
        #include "complex.h"
        int main() { ComplexStruct cs; Buffer* buf = create_buffer(1024); simple_function(); complex_function("test", 4, NULL, (struct {int option1; float option2;}){1, 2.0}); destroy_buffer(buf); return 0; }
    config.json: |
      {"project_name":"parser_tokenizer_integration_test","source_folders":["."],"output_dir":"./output","recursive_search":true,"include_depth":2,"file_filters":{"include":["*.c","*.h"],"exclude":[]}}
    assertions:
      execution: { exit_code: 0, output_files: ["model.json","model_transformed.json","main.puml"], max_execution_time: 45.0 }
      model: { validate_structure: true, expected_files: ["main.c","complex.h","functions.h"], element_counts: { functions: 6, structs: 5, macros: 3 } }
      puml: { syntax_valid: true, file_count: 1 }

  - id: "complete_system_integration"
    test: { name: "Complete System Integration", category: "integration", id: "2005" }
    source_files:
      src/main.c: |
        #include "game/game.h"
        #include "platform/platform.h"
        int main(int argc, char** argv) { Platform platform; Game game; if (!platform_init(&platform)) { return -1; } if (!game_init(&game, &platform)) { platform_shutdown(&platform); return -1; } while (platform_is_running(&platform)) { platform_update(&platform); game_update(&game, platform_get_delta_time(&platform)); game_render(&game); } game_shutdown(&game); platform_shutdown(&platform); return 0; }
      src/game/game.h: |
        #ifndef GAME_H
        #define GAME_H
        #include "../platform/platform.h"
        #include "entities/player.h"
        #include "world/level.h"
        #include "rendering/renderer.h"
        typedef struct { Platform* platform; Player player; Level current_level; Renderer renderer; double total_time; } Game;
        int game_init(Game* game, Platform* platform); void game_update(Game* game, double delta_time); void game_render(Game* game); void game_shutdown(Game* game);
        #endif
      src/game/entities/player.h: |
        #ifndef PLAYER_H
        #define PLAYER_H
        #include "../../math/vector.h"
        #include "../../physics/rigidbody.h"
        typedef struct { Vector3 position; Vector3 velocity; RigidBody physics; float health; int score; } Player;
        #endif
      src/game/world/level.h: |
        #ifndef LEVEL_H
        #define LEVEL_H
        #include "../entities/player.h"
        #include "../../graphics/mesh.h"
        typedef struct { Mesh* geometry; Player* players; int player_count; char* name; } Level;
        #endif
      src/game/rendering/renderer.h: |
        #ifndef RENDERER_H
        #define RENDERER_H
        #include "../../graphics/context.h"
        #include "../../graphics/shader.h"
        typedef struct { GraphicsContext context; Shader* active_shader; int frame_count; } Renderer;
        #endif
      src/platform/platform.h: |
        #ifndef PLATFORM_H
        #define PLATFORM_H
        typedef struct { void* window_handle; int window_width; int window_height; double last_frame_time; } Platform;
        int platform_init(Platform* platform); void platform_update(Platform* platform); int platform_is_running(Platform* platform); double platform_get_delta_time(Platform* platform); void platform_shutdown(Platform* platform);
        #endif
      src/math/vector.h: |
        #ifndef VECTOR_H
        #define VECTOR_H
        typedef struct { float x, y, z; } Vector3;
        Vector3 vector_add(Vector3 a, Vector3 b); Vector3 vector_scale(Vector3 v, float scalar);
        #endif
      src/physics/rigidbody.h: |
        #ifndef RIGIDBODY_H
        #define RIGIDBODY_H
        #include "../math/vector.h"
        typedef struct { Vector3 position; Vector3 velocity; Vector3 acceleration; float mass; } RigidBody;
        #endif
      src/graphics/context.h: |
        #ifndef CONTEXT_H
        #define CONTEXT_H
        typedef struct { void* api_context; int api_version; } GraphicsContext;
        #endif
      src/graphics/shader.h: |
        #ifndef SHADER_H
        #define SHADER_H
        typedef struct { unsigned int program_id; char* source_code; } Shader;
        #endif
      src/graphics/mesh.h: |
        #ifndef MESH_H
        #define MESH_H
        typedef struct { float* vertices; unsigned int* indices; int vertex_count; int index_count; } Mesh;
        #endif
    config.json: |
      {"project_name":"complete_system_integration_test","source_folders":["src"],"output_dir":"./output","recursive_search":true,"include_depth":5,"file_filters":{"include":["*.c","*.h"],"exclude":[]}}
    assertions:
      execution: { exit_code: 0, output_files: ["model.json","model_transformed.json","main.puml"], max_execution_time: 60.0 }
      model: { validate_structure: true, expected_files: ["main.c","game.h","player.h","level.h","renderer.h","platform.h","vector.h","rigidbody.h","context.h","shader.h","mesh.h"], element_counts: { functions: 12, structs: 10 } }
      puml: { syntax_valid: true, file_count: 1 }

  - id: "new_formatting_complete"
    test: { name: "Complete Formatting Integration", category: "integration", id: "2101" }
    source_files:
      graphics.c: |
        #include "graphics.h"
        #define MAX_RENDER_WIDTH 1920
        #define MAX_RENDER_HEIGHT 1080
        #define DEBUG_RENDER
        static int render_cache_size = 1024; static unsigned long last_render_time = 0;
        Color default_background = 0x000000; int max_texture_size = 4096;
        static int calculate_pixel_offset(int x, int y) { return y * MAX_RENDER_WIDTH + x; }
        static void optimize_render_buffer(void) {}
        RenderStatus render_rectangle(Rectangle* rect) { return RENDER_OK; }
        void set_pixel_color(Pixel* pixel, Color color) { pixel->rgba = color; }
      graphics.h: |
        #ifndef GRAPHICS_H
        #define GRAPHICS_H
        typedef unsigned int uint32_t; typedef unsigned char uint8_t;
        typedef enum { RED = 0xFF0000, GREEN = 0x00FF00, BLUE = 0x0000FF, ALPHA } Color;
        typedef enum { RENDER_OK, RENDER_ERROR, RENDER_PENDING } RenderStatus;
        typedef struct { float x; float y; float z; } Point;
        typedef struct { Point top_left; int width; int height; Color color; } Rectangle;
        typedef union { uint32_t rgba; struct { uint8_t r, g, b, a; } components; } Pixel;
        typedef void (*RenderCallback)(Rectangle*);
        typedef float Coordinate; typedef Pixel* PixelBuffer;
        RenderStatus render_rectangle(Rectangle* rect); void set_pixel_color(Pixel* pixel, Color color);
        extern Color default_background; extern int max_texture_size;
        #endif
      main.c: |
        #include "graphics.h"
        int main() { Rectangle rect = {{0.0, 0.0, 0.0}, 100, 50, RED}; Pixel pixel; RenderStatus status = render_rectangle(&rect); set_pixel_color(&pixel, BLUE); return (status == RENDER_OK) ? 0 : 1; }
    config.json: |
      {"project_name":"complete_formatting_integration_test","source_folders":["."],"output_dir":"./output","recursive_search":true,"include_depth":2,"file_filters":{"include":["*.c","*.h"],"exclude":[]}}
    assertions:
      execution: { exit_code: 0, output_files: ["model.json","model_transformed.json","graphics.puml","main.puml"], max_execution_time: 45.0 }
      model: { validate_structure: true, element_counts: { functions: 7, structs: 4, enums: 2, unions: 1, macros: 4 } }
      puml: { syntax_valid: true, file_count: 2 }

  - id: "new_formatting_mixed_project"
    test: { name: "Mixed Project Comprehensive Formatting", category: "integration", id: "2102" }
    source_files:
      main.c: |
        #include "main.h"
        #include "utils.h"
        char* program_name = "TestApp"; static int debug_mode = 0;
        int main(int argc, char** argv) { program_name = (argc > 0) ? argv[0] : "unknown"; utility_function(); internal_main_helper(); return 0; }
        static void internal_main_helper(void) { debug_mode = 1; }
      utils.c: |
        #include "utils.h"
        #include "main.h"
        int utils_initialized = 0; static void* private_cache = 0;
        void utility_function(void) { if (!utils_initialized) { utils_initialized = 1; internal_utils_helper(); } }
        static int internal_utils_helper(void) { private_cache = (void*)1; return (private_cache != 0) ? 1 : 0; }
      main.h: |
        #ifndef MAIN_H
        #define MAIN_H
        extern char* program_name; int main(int argc, char** argv);
        #endif
      utils.h: |
        #ifndef UTILS_H
        #define UTILS_H
        #include <stdlib.h>
        extern int utils_initialized; void utility_function(void);
        #endif
    config.json: |
      {"project_name":"mixed_project_formatting_test","source_folders":["."],"output_dir":"./output","recursive_search":true,"include_depth":2,"file_filters":{"include":["*.c","*.h"],"exclude":[]}}
    assertions:
      execution: { exit_code: 0, output_files: ["model.json","model_transformed.json","main.puml","utils.puml"], max_execution_time: 45.0 }
      model: { validate_structure: true, expected_files: ["main.c","utils.c","main.h","utils.h"], element_counts: { functions: 6, globals: 6 } }
      puml: { syntax_valid: true, file_count: 2 }