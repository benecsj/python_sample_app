test:
  name: "Parser \u2013 Elements Comprehensive"
  description: Consolidated parsing of structs, enums, globals, and macros in a single
    scenario
  category: unit
  id: '130'
---
source_files:
  structs.c: |
    struct Point {
        int x;
        int y;
    };
    
    struct Rectangle {
    int width;
        int height;
    };
    
  enums.c: |
    enum Color {
        RED,
        GREEN,
        BLUE
    };
    
    enum Status {
    RUNNING,
        STOPPED
    };
    
assertions:
  execution:
    exit_code: 0
    output_files:
    - model.json
    - model_transformed.json
    - structs.puml
    - enums.puml
    - globals.puml
    - macros.puml
  model:
    files:
      structs.c:
        structs:
          Point:
            fields:
            - x
            - y
          Rectangle:
            fields:
            - width
            - height
      enums.c:
        enums:
          Color:
            values:
            - RED
            - GREEN
            - BLUE
          Status:
            values:
            - RUNNING
            - STOPPED
      globals.c:
        globals:
        - global_int
        - global_float
        - global_string
        - static_var
      macros.c:
        macros:
        - MAX_SIZE
        - PI
        - VERSION
        - MIN
  puml:
    syntax_valid: true
    files:
      structs.puml:
        contains_elements:
        - Point
        - Rectangle
      enums.puml:
        contains_elements:
        - Color
        - Status
      globals.puml:
        contains_lines:
        - float global_float
        - int global_int
        - char * global_string
        - int static_var
      macros.puml:
        contains_lines:
        - '#define MAX_SIZE'
        - '#define MIN(a, b)'
        - '#define PI'
        - '#define VERSION'

---
config.json: |
  {
    "project_name": "auto_test",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true
  }
