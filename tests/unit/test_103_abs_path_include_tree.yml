test:
  name: "Path Resolution and Include Tree \u2013 Comprehensive"
  description: Consolidated absolute/relative/mixed path resolution and include tree
    generation
  category: unit
  id: '103'
---
source_files:
  include/types.h: |
    #ifndef TYPES_H
    #define TYPES_H
    typedef struct {
        float
    x, y, z;
    } vector3_t;
    #endif
    
  utils.h: |
    #ifndef UTILS_H
    #define UTILS_H
    typedef struct {
        int id;
        char
    name[32];
    } util_data_t;
    void init_utils(void);
    #endif
    
assertions:
  execution:
    should_succeed: true
  model:
    files:
      geometry.c:
        includes:
        - include/types.h
        functions:
        - normalize
      types.h:
        structs:
          vector3_t:
            fields:
            - z
      main.c:
        includes:
        - utils.h
        functions:
        - main
      utils.h:
        structs:
          util_data_t:
            fields:
            - id
            - name
        functions:
        - init_utils
      app.c:
        includes:
        - common/base.h
        - modules/graphics.h
      base.h:
        structs:
          base_t:
            fields:
            - base_id
            - base_name
        functions:
        - base_init
      graphics.h:
        structs:
          graphics_t:
            fields:
            - base
            - width
            - height
        functions:
        - graphics_render
  puml:
    syntax_valid: true
---
config.json: |
  {
    "project_name": "auto_test",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true
  }

---
source_files_generate_only:
  model.json: |
    {
      "project_name": "test_project",
      "source_folder": "/test"\
        ,
      "files": {
        "main.c": {"file_path": "main.c", "name": "main.c"\
        , "includes": ["app.h"], "macros": [], "enums": {}, "structs": {}, "\
        unions": {}, "aliases": {}, "functions": [{"name": "main", "return_type"\
        : "int", "is_declaration": false, "parameters": []}], "globals": []},
    \
        \    "app.h": {"file_path": "app.h", "name": "app.h", "includes":\
        \ ["utils.h", "config.h"], "macros": [], "enums": {}, "structs": {},\
        \ "unions": {}, "aliases": {}, "functions": [{"name": "app_init", "\
        return_type": "void", "is_declaration": true, "parameters": []}], "globals"\
        : []},
        "utils.h": {"file_path": "utils.h", "name": "utils.h", "\
        includes": ["types.h"], "macros": [], "enums": {}, "structs": {}, "\
        unions": {}, "aliases": {}, "functions": [{"name": "utility_function"\
        , "return_type": "void", "is_declaration": true, "parameters": []}], "\
        globals": []},
        "config.h": {"file_path": "config.h", "name": "\
        config.h", "includes": [], "macros": [], "enums": {}, "structs": {},\
        \ "unions": {}, "aliases": {}, "functions": [], "globals": [{"name"\
        : "CONFIG_VALUE", "type": "extern int"}]},
        "types.h": {"file_path"\
        : "types.h", "name": "types.h", "includes": [], "macros": [], "enums"\
        : {}, "structs": {"Point": {"name": "Point", "fields": [{"name": "\
        x", "type": "int"}, {"name": "y", "type": "int"}]}}, "unions":\
        \ {}, "aliases": {}, "functions": [], "globals": []}
      },
      "include_relations"\
        : [
        {"source_file": "main.c", "included_file": "app.h", "depth"\
        : 1},
        {"source_file": "app.h", "included_file": "utils.h", "depth"\
        : 1},
        {"source_file": "app.h", "included_file": "config.h", "depth"\
        : 1},
        {"source_file": "utils.h", "included_file": "types.h", "depth"\
        : 1}
      ]
    }
    
---
cli_execution:
  steps:
  - run_full_pipeline
  - generate_only_from_model
---
assertions_generate_only:
  puml:
    main.c.puml:
      contains:
      - main.c
      - app.h
      - utils.h
      - config.h
      - types.h
      - main(
      - app_init
      - utility_function
      - CONFIG_VALUE
      - class "Point" as STRUCT_POINT <<struct>>
