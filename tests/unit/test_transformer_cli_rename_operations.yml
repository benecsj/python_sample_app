# Test metadata
test:
  name: "Transformer Rename Operations Comprehensive"
  description: "Test comprehensive rename operations through CLI including functions, structs, enums, macros"
  category: "unit"
  id: "0812"

---
# Source files
source_files:
  main.c: |
    #include <stdio.h>
    #include "utils.h"
    
    #define MAX_SIZE 100
    #define OLD_VERSION "1.0"
    #define BUFFER_COUNT 10
    
    typedef struct {
        int old_id;
        char old_name[50];
        float old_value;
    } OldDataStruct;
    
    typedef struct {
        char* old_buffer;
        size_t old_size;
    } OldBufferStruct;
    
    enum OldStatus {
        OLD_STATUS_OK,
        OLD_STATUS_ERROR,
        OLD_STATUS_PENDING
    };
    
    enum OldPriority {
        OLD_PRIORITY_LOW,
        OLD_PRIORITY_HIGH
    };
    
    int old_global_counter = 0;
    static int old_internal_state = 0;
    char* old_version_string = "1.0";
    
    int main() {
        printf("Main function\n");
        old_initialize();
        old_process_data();
        return 0;
    }
    
    void old_initialize() {
        printf("Initialize function\n");
        old_global_counter = 0;
    }
    
    void old_process_data() {
        printf("Process data function\n");
    }
    
    void old_cleanup() {
        printf("Cleanup function\n");
    }

  utils.h: |
    #ifndef UTILS_H
    #define UTILS_H
    
    #define OLD_UTIL_VERSION "1.0"
    #define OLD_UTIL_MAX_SIZE 256
    
    typedef struct {
        char* old_data;
        size_t old_length;
    } OldUtilBuffer;
    
    void old_init_utils(void);
    void old_cleanup_utils(void);
    
    #endif // UTILS_H

---
# Configuration with comprehensive rename operations
config.json: |
  {
    "project_name": "rename_operations_test",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 2,
    "transformations": {
      "rename": {
        "functions": {
          "^old_(.*)$": "new_$1",
          "^OLD_(.*)$": "NEW_$1"
        },
        "structs": {
          "^Old(.*)Struct$": "New$1Struct",
          "^OldUtil(.*)$": "NewUtil$1"
        },
        "enums": {
          "^Old(.*)$": "New$1"
        },
        "macros": {
          "^OLD_(.*)$": "NEW_$1",
          "^MAX_SIZE$": "BUFFER_SIZE"
        },
        "globals": {
          "^old_(.*)$": "new_$1"
        }
      }
    }
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    max_execution_time: 30.0
  
  model:
    validate_structure: true
    
    # Validate expected files are processed
    expected_files: ["main.c", "utils.h"]
    
    # Validate that old names are NOT present
    functions_not_exist: ["old_initialize", "old_process_data", "old_cleanup", "old_init_utils", "old_cleanup_utils"]
    structs_not_exist: ["OldDataStruct", "OldBufferStruct", "OldUtilBuffer"]
    enums_not_exist: ["OldStatus", "OldPriority"]
    
    # Validate that new names ARE present
    functions_exist: ["main", "new_initialize", "new_process_data", "new_cleanup", "new_init_utils", "new_cleanup_utils"]
    structs_exist: ["NewDataStruct", "NewBufferStruct", "NewUtilBuffer"]
    enums_exist: ["NewStatus", "NewPriority"]
    
    # Validate element counts after renaming (same count, different names)
    element_counts:
      functions: 6  # main, new_initialize, new_process_data, new_cleanup, new_init_utils, new_cleanup_utils
      structs: 3    # NewDataStruct, NewBufferStruct, NewUtilBuffer
      enums: 2      # NewStatus, NewPriority

  puml:
    syntax_valid: true
    file_count: 1
    
    files:
      main.puml:
        contains_elements: ["main", "new_initialize", "NewDataStruct", "NewStatus", "NewUtilBuffer"]
        contains_lines: [
          "class \"main\" as MAIN <<source>> #LightBlue",
          "class \"utils\" as HEADER_UTILS <<header>> #LightGreen",
          "class \"NewDataStruct\" as TYPEDEF_NEWDATASTRUCT <<struct>> #LightYellow",
          "class \"NewBufferStruct\" as TYPEDEF_NEWBUFFERSTRUCT <<struct>> #LightYellow",
          "class \"NewUtilBuffer\" as TYPEDEF_NEWUTILBUFFER <<struct>> #LightYellow",
          "class \"NewStatus\" as TYPEDEF_NEWSTATUS <<enumeration>> #LightYellow",
          "class \"NewPriority\" as TYPEDEF_NEWPRIORITY <<enumeration>> #LightYellow",
          "MAIN --> HEADER_UTILS : <<include>>",
          "+ int main",
          "+ void new_initialize",
          "+ void new_process_data",
          "+ void new_cleanup",
          "+ void new_init_utils",
          "+ void new_cleanup_utils"
        ]
        not_contains_lines: [
          "old_initialize",
          "old_process_data",
          "old_cleanup",
          "old_init_utils",
          "old_cleanup_utils",
          "OldDataStruct",
          "OldBufferStruct",
          "OldUtilBuffer",
          "OldStatus",
          "OldPriority"
        ]