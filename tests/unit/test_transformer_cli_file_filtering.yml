# Test metadata
test:
  name: "Transformer File Filtering Comprehensive"
  description: "Test comprehensive file filtering capabilities through CLI including include/exclude patterns"
  category: "unit"
  id: "0810"

---
# Source files
source_files:
  main.c: |
    #include <stdio.h>
    #include "utils.h"
    #include "config.h"
    
    int main() {
        printf("Main function\n");
        init_utils();
        load_config();
        return 0;
    }

  utils.h: |
    #ifndef UTILS_H
    #define UTILS_H
    
    typedef struct {
        int id;
        char name[50];
    } UtilStruct;
    
    void init_utils(void);
    void cleanup_utils(void);
    
    #endif // UTILS_H

  config.h: |
    #ifndef CONFIG_H  
    #define CONFIG_H
    
    typedef struct {
        char path[256];
        int size;
    } ConfigData;
    
    void load_config(void);
    
    #endif // CONFIG_H

  backup_main.c: |
    // This should be filtered out
    int backup_function() {
        return 0;
    }

  test_file.c: |
    // This should be filtered out
    void test_function() {
        // test code
    }

  internal/debug.h: |
    // This should be filtered out
    #ifndef DEBUG_H
    #define DEBUG_H
    void debug_print(const char* msg);
    #endif

---
# Configuration with file filtering
config.json: |
  {
    "project_name": "file_filtering_test",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 2,
    "file_filters": {
      "include": ["main.c", "*.h"],
      "exclude": ["*backup*", "*test*", "internal/*"]
    }
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    max_execution_time: 30.0
  
  model:
    validate_structure: true
    
    # Validate that included files are present
    expected_files: ["main.c", "utils.h", "config.h"]
    
    # Validate that excluded files are NOT present
    files_not_exist: ["backup_main.c", "test_file.c", "internal/debug.h"]
    
    # Validate functions from included files exist
    functions_exist: ["main", "init_utils", "cleanup_utils", "load_config"]
    
    # Validate structs from included files exist
    structs_exist: ["UtilStruct", "ConfigData"]
    
    # Validate element counts match filtered content
    element_counts:
      functions: 4  # main, init_utils, cleanup_utils, load_config
      structs: 2    # UtilStruct, ConfigData

  puml:
    syntax_valid: true
    file_count: 1
    
    files:
      main.puml:
        contains_elements: ["main", "UtilStruct", "ConfigData"]
        contains_lines: [
          "class \"main\" as MAIN <<source>> #LightBlue",
          "class \"utils\" as HEADER_UTILS <<header>> #LightGreen",
          "class \"config\" as HEADER_CONFIG <<header>> #LightGreen",
          "class \"UtilStruct\" as TYPEDEF_UTILSTRUCT <<struct>> #LightYellow",
          "class \"ConfigData\" as TYPEDEF_CONFIGDATA <<struct>> #LightYellow",
          "MAIN --> HEADER_UTILS : <<include>>",
          "MAIN --> HEADER_CONFIG : <<include>>",
          "+ int main",
          "+ void init_utils",
          "+ void cleanup_utils",
          "+ void load_config"
        ]
        not_contains_lines: [
          "backup_function",
          "test_function", 
          "debug_print",
          "backup_main",
          "test_file",
          "debug"
        ]