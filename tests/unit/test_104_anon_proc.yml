test:
  name: Anonymous Processing Comprehensive
  description: Comprehensive test for multi-pass anonymous structure processing with
    nested levels
  category: unit
  id: '104'
---
source_files:
  anonymous_test.c: |
    // Test multi-level nested anonymous structures
    typedef struct\
        \ {
        int level1_id;
        struct {                        
            int level2_id;
    \
        \        union {                     
                int level3_int;
             \
        \   float level3_float;
            } level3_union;
        } level2_struct;
    } moderately_nested_t;
    \
        
    // Test deeper nesting (level 4)
    typedef struct {
        char root_marker;
    \
        \    struct {
            int level2_value;
            struct {
                float\
        \ level3_value;
                union {
                    char level4_char;
        \
        \            int level4_int;
                } level4_data;
            } level3_struct;
    \
        \    } level2_container;
    } deeply_nested_t;
    
    // Test mixed structure types
    \
        typedef struct {
        int base_id;
        union {
            struct {
              \
        \  int struct_in_union;
                char struct_char;
            } inner_struct;
    \
        \        int direct_int;
        } mixed_union;
    } mixed_types_t;
    
    // Test multiple\
        \ siblings at same level
    typedef struct {
        int parent_id;
        struct {
    \
        \        int sibling1_value;
        } sibling1;
        struct {
            float sibling2_value;
    \
        \    } sibling2;
        union {
            char sibling3_char;
            int sibling3_int;
    \
        \    } sibling3;
    } multiple_siblings_t;
    
    // Global variables using the typedefs
    \
        moderately_nested_t moderate_var;
    deeply_nested_t deep_var;
    mixed_types_t mixed_var;
    \
        multiple_siblings_t siblings_var;
    
    // Functions that use these types
    void process_moderate(moderately_nested_t*\
        \ ptr) {
        ptr->level1_id = 1;
        ptr->level2_struct.level2_id = 2;
    }
    
    \
        void process_deep(deeply_nested_t* ptr) {
        ptr->root_marker = 'A';
    }
    
    \
        int main() {
        process_moderate(&moderate_var);
        process_deep(&deep_var);
    \
        \    return 0;
    }
    
---
config.json: |
  {
    "project_name": "test_anonymous_processing",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 1
  }
  
---
assertions:
  execution:
    exit_code: 0
    output_files:
    - model.json
    - model_transformed.json
    - anonymous_test.puml
  model:
    validate_structure: true
    project_name: test_anonymous_processing
    expected_files:
    - anonymous_test.c
    files:
      anonymous_test.c:
        structs_exist:
        - moderately_nested_t
        - deeply_nested_t
        - mixed_types_t
        - multiple_siblings_t
        functions_exist:
        - process_moderate
        - process_deep
        - main
        globals_exist:
        - moderate_var
        - deep_var
        - mixed_var
        - siblings_var
    structs_exist:
    - moderately_nested_t
    - deeply_nested_t
    - mixed_types_t
    - multiple_siblings_t
  puml:
    syntax_valid: true
    file_count: 1
    contains_elements:
    - moderately_nested_t
    - deeply_nested_t
    - mixed_types_t
    - multiple_siblings_t
    - process_moderate
    - process_deep
    - main
    files:
      anonymous_test.puml:
        syntax_valid: true
        contains_lines:
        - class "moderately_nested_t" as TYPEDEF_MODERATELY_NESTED_T
        - class "deeply_nested_t" as TYPEDEF_DEEPLY_NESTED_T
        - class "mixed_types_t" as TYPEDEF_MIXED_TYPES_T
        - class "multiple_siblings_t" as TYPEDEF_MULTIPLE_SIBLINGS_T
        - void process_moderate(
        - void process_deep(
        - int main()
        contains_elements:
        - moderately_nested_t
        - deeply_nested_t
        - mixed_types_t
