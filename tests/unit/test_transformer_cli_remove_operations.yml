# Test metadata
test:
  name: "Transformer Remove Operations Comprehensive"
  description: "Test comprehensive remove operations through CLI including functions, structs, enums, macros"
  category: "unit"
  id: "0811"

---
# Source files
source_files:
  main.c: |
    #include <stdio.h>
    #include "utils.h"
    
    #define MAX_SIZE 100
    #define DEBUG_MODE 1
    #define TEMP_BUFFER 256
    #define OLD_CONSTANT 42
    
    typedef struct {
        int id;
        char name[50];
        float value;
    } DataStruct;
    
    typedef struct {
        int temp_id;
        char temp_data[20];
    } TempStruct;
    
    typedef struct {
        int old_field;
        char old_name[10];
    } OldStruct;
    
    enum Status {
        STATUS_OK,
        STATUS_ERROR,
        STATUS_PENDING
    };
    
    enum TempStatus {
        TEMP_OK,
        TEMP_ERROR
    };
    
    enum OldStatus {
        OLD_OK,
        OLD_ERROR
    };
    
    int global_counter = 0;
    static int internal_state = 0;
    int temp_variable = 99;
    int old_variable = 123;
    
    int main() {
        printf("Main function\n");
        return 0;
    }
    
    void process_data() {
        printf("Processing data\n");
    }
    
    void temp_function() {
        printf("Temporary function\n");
    }
    
    void old_function() {
        printf("Old function\n");
    }
    
    static void debug_helper() {
        printf("Debug helper\n");
    }

  utils.h: |
    #ifndef UTILS_H
    #define UTILS_H
    
    #define UTIL_VERSION "1.0"
    #define UTIL_DEBUG 1
    #define UTIL_OLD_FEATURE 0
    
    typedef struct {
        char* data;
        size_t length;
    } Buffer;
    
    void init_utils(void);
    void cleanup_utils(void);
    
    #endif // UTILS_H

---
# Configuration with comprehensive remove operations
config.json: |
  {
    "project_name": "remove_operations_test",
    "source_folders": ["."],
    "output_dir": "./output",
    "recursive_search": true,
    "include_depth": 2,
    "transformations": {
      "remove": {
        "functions": ["temp_.*", "old_.*", "debug_.*"],
        "structs": ["Temp.*", "Old.*"],
        "enums": ["Temp.*", "Old.*"],
        "macros": [".*_DEBUG", ".*OLD.*", "TEMP_.*"],
        "globals": ["temp_.*", "old_.*"]
      }
    }
  }

---
# Assertions
assertions:
  execution:
    exit_code: 0
    max_execution_time: 30.0
  
  model:
    validate_structure: true
    
    # Validate expected files are processed
    expected_files: ["main.c", "utils.h"]
    
    # Validate that removed elements are NOT present
    functions_not_exist: ["temp_function", "old_function", "debug_helper"]
    structs_not_exist: ["TempStruct", "OldStruct"]
    enums_not_exist: ["TempStatus", "OldStatus"]
    
    # Validate that preserved elements remain
    functions_exist: ["main", "process_data", "init_utils", "cleanup_utils"]
    structs_exist: ["DataStruct", "Buffer"]
    enums_exist: ["Status"]
    
    # Validate element counts after removal
    element_counts:
      functions: 4  # main, process_data, init_utils, cleanup_utils
      structs: 2    # DataStruct, Buffer
      enums: 1      # Status

  puml:
    syntax_valid: true
    file_count: 1
    
    files:
      main.puml:
        contains_elements: ["main", "process_data", "DataStruct", "Status", "Buffer"]
        contains_lines: [
          "class \"main\" as MAIN <<source>> #LightBlue",
          "class \"utils\" as HEADER_UTILS <<header>> #LightGreen",
          "class \"DataStruct\" as TYPEDEF_DATASTRUCT <<struct>> #LightYellow",
          "class \"Status\" as TYPEDEF_STATUS <<enumeration>> #LightYellow",
          "class \"Buffer\" as TYPEDEF_BUFFER <<struct>> #LightYellow",
          "MAIN --> HEADER_UTILS : <<include>>",
          "+ int main",
          "+ void process_data",
          "+ void init_utils",
          "+ void cleanup_utils"
        ]
        not_contains_lines: [
          "temp_function",
          "old_function",
          "debug_helper",
          "TempStruct",
          "OldStruct", 
          "TempStatus",
          "OldStatus",
          "temp_variable",
          "old_variable"
        ]