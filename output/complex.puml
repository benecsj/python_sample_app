@startuml complex

class "complex" as COMPLEX <<source>> #LightBlue
{
    -- Global Variables --
    Process_Cfg_Process_acpfct_t Process_Cfg_Process_acpfct
    math_operation_t global_math_ops [ 10 ]
    -- Functions --
    static Std_ReturnType ProcessorAdapter_Process(const Process_T * job_pst)
    static Std_ReturnType ProcessorHardware_Process(const Process_T * job_pst)
    static Std_ReturnType ProcessorService_Process(const Process_T * job_pst)
    static int add_operation(int a, int b)
    complex_handler_t * create_complex_handler(const char * name, ...)
    void * create_handler(const char * name, int ( * init_func ) ( void * ) init_func, ...)
    static int divide_operation(int a, int b)
    int execute_operations(int value, math_ops_array_t ops, int op_count)
    math_operation_t * get_math_operations()
    static void init_math_operations()
    static int modulo_operation(int a, int b)
    static int multiply_operation(int a, int b)
    static void print_result(int * data, int size)
    int process_with_callbacks(int data [ ], int size, math_operation_t operations [ ], ...)
    void run_complex_tests()
    static int subtract_operation(int a, int b)
    static int test_callback(int * item)
    void test_complex_macro(int * x, int y, int z)
    void test_handle_operation(operation_type_t op_type, int * data, int size)
    void test_handler_table()
    void test_mixed_union()
    void test_operation_set()
    void test_process_array(int * arr, int size)
    void test_processor_job_processing()
    void test_processor_utility_macros()
    void test_stringify_macro()
}


' Include relationships

' Declaration relationships

' Uses relationships

@enduml