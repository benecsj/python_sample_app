@startuml logger

class "logger" as LOGGER <<source>> #LightBlue
{
    -- Global Variables --
    + log_callback_t current_cb
    -- Functions --
    #include "logger.h" #include <stdarg.h> #include <string.h> static log_callback_t current_cb = NULL ; void set_log_callback()
    void log_message()
}

class "logger" as HEADER_LOGGER <<header>> #LightGreen
{
    -- Macros --
    + #define LOGGER_H
    -- Functions --
    + #ifndef LOGGER_H #define LOGGER_H #include <stdio.h> #include "config.h" typedef enum log_level_tag { LOG_DEBUG = 0 , LOG_INFO , LOG_WARN , LOG_ERROR } log_level_t ; typedef void ( * log_callback_t ) ( log_level_t level , const char * message ) ; void set_log_callback()
    + void log_message()
}

class "stdarg.h" as HEADER_STDARG_H <<header>> #LightGray
{
}

class "string.h" as HEADER_STRING_H <<header>> #LightGray
{
}

class "config" as HEADER_CONFIG <<header>> #LightGreen
{
    -- Macros --
    + #define CONFIG_H
    + #define PROJECT_NAME
    + #define MAX_LABEL_LEN
    + #define DEFAULT_BUFFER_SIZE
}

class "stdio.h" as HEADER_STDIO_H <<header>> #LightGray
{
}

LOGGER --> HEADER_LOGGER : <<include>>
LOGGER --> HEADER_STDARG_H : <<include>>
LOGGER --> HEADER_STRING_H : <<include>>
HEADER_LOGGER --> HEADER_STDIO_H : <<include>>
HEADER_LOGGER --> HEADER_CONFIG : <<include>>

@enduml