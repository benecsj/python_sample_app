@startuml logger

class "logger" as HEADER_LOGGER <<header>> #LightGreen
{
    -- Macros --
    - #define LOGGER_H
    -- Typedefs --
    + enum
    + void ( * log_callback_t ) ( log_level_t level , const char * message )
    -- Functions --
    void set_log_callback(log_callback_t cb)
    void log_message(log_level_t level, const char * fmt, ...)
}

class "stdio.h" as HEADER_STDIO <<header>> #LightGray
{
}

class "config" as HEADER_CONFIG <<header>> #LightGreen
{
    -- Macros --
    + #define CONFIG_H
    + #define PROJECT_NAME
    + #define MAX_LABEL_LEN
    + #define DEFAULT_BUFFER_SIZE
}
class "stddef.h" as HEADER_STDDEF <<header>> #LightGray
{
}

class "stdint.h" as HEADER_STDINT <<header>> #LightGray
{
}

enum "log_level_t" as TYPEDEF_log_level_t <<typedef>> #LightYellow
{
    LOG_DEBUG = 0
    LOG_INFO
    LOG_WARN
    LOG_ERROR
}

class "log_callback_t" as TYPEDEF_log_callback_t <<typedef>> #LightYellow
{
    + void ( * log_callback_t ) ( log_level_t level , const char * message )
}

class "id_t" as TYPEDEF_id_t <<typedef>> #LightYellow
{
    + uint32_t
}

class "status_t" as TYPEDEF_status_t <<typedef>> #LightYellow
{
    + int32_t
}

HEADER_LOGGER --> HEADER_STDIO : <<include>>
HEADER_LOGGER --> HEADER_CONFIG : <<include>>
HEADER_CONFIG --> HEADER_STDDEF : <<include>>
HEADER_CONFIG --> HEADER_STDINT : <<include>>
HEADER_LOGGER ..> TYPEDEF_log_level_t : declares
TYPEDEF_log_level_t -|> TYPE_ENUM : «alias»
TYPEDEF_log_callback_t ..> TYPEDEF_log_level_t : <<uses>>
HEADER_LOGGER ..> TYPEDEF_log_level_t : <<declares>>
HEADER_LOGGER ..> TYPEDEF_log_callback_t : <<declares>>
HEADER_CONFIG ..> TYPEDEF_id_t : <<declares>>
HEADER_CONFIG ..> TYPEDEF_status_t : <<declares>>

@enduml