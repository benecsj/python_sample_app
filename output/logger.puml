@startuml logger

class "logger" as LOGGER <<source>> #LightBlue
{
-- Global Variables --
- log_callback_t current_cb
-- Functions --
void set_log_callback(log_callback_t cb)
void log_message(log_level_t level, const char * fmt, ...)
}

enum "log_level_t" as TYPEDEF_LOG_LEVEL_T <<typedef>> #LightYellow
{
LOG_DEBUG = 0
LOG_INFO
LOG_WARN
LOG_ERROR
}

class "logger" as HEADER_LOGGER <<header>> #LightGreen
{
-- Macros --
+ #define LOGGER_H
-- Functions --
+ void set_log_callback(log_callback_t cb);
+ void log_message(log_level_t level, const char * fmt, ...);
}
class "config" as HEADER_CONFIG <<header>> #LightGreen
{
-- Macros --
+ #define CONFIG_H
+ #define PROJECT_NAME
+ #define MAX_LABEL_LEN
+ #define DEFAULT_BUFFER_SIZE
}
LOGGER --> HEADER_LOGGER : <<include>>
HEADER_LOGGER --> HEADER_CONFIG : <<include>>
HEADER_LOGGER ..> TYPEDEF_LOG_LEVEL_T : <<declares>>

@enduml