@startuml typedef_test

class "typedef_test" as TYPEDEF_TEST <<source>> #LightBlue
{
    -- Global Variables --
    - MyLen global_length
    - MyBuffer global_buffer
    - MyComplexPtr global_complex
    -- Functions --
    void log_buffer(const MyBuffer * buffer)
    MyInt process_buffer(MyBuffer * buffer)
    int my_callback(MyBuffer * buffer)
    MyComplex * create_complex(MyLen id, MyString name)
    int main()
}

class ""typedef_test.h".h" as HEADER_"TYPEDEF_TEST_H" <<header>> #LightGray
{
}

class ""complex_example.h".h" as HEADER_"COMPLEX_EXAMPLE_H" <<header>> #LightGray
{
}

class ""geometry.h".h" as HEADER_"GEOMETRY_H" <<header>> #LightGray
{
}

class ""logger.h".h" as HEADER_"LOGGER_H" <<header>> #LightGray
{
}

class "<stdlib.h>.h" as HEADER_<STDLIB_H> <<header>> #LightGray
{
}

TYPEDEF_TEST --> HEADER_"TYPEDEF_TEST_H" : <<include>>
TYPEDEF_TEST --> HEADER_"COMPLEX_EXAMPLE_H" : <<include>>
TYPEDEF_TEST --> HEADER_"GEOMETRY_H" : <<include>>
TYPEDEF_TEST --> HEADER_"LOGGER_H" : <<include>>
TYPEDEF_TEST --> HEADER_<STDLIB_H> : <<include>>

@enduml