@startuml typedef_test

class "typedef_test" as TYPEDEF_TEST <<source>> #LightBlue
{
    -- Global Variables --
    + MyLen global_length
    + MyBuffer global_buffer
    + MyComplexPtr global_complex
    -- Functions --
    #include "typedef_test.h" #include "complex_example.h" #include "geometry.h" #include "logger.h" #include <stdlib.h> MyLen global_length = 0U ; MyBuffer global_buffer = { 0U , NULL } ; MyComplexPtr global_complex = NULL ; void log_buffer()
    MyInt process_buffer()
    int my_callback()
    MyComplex * create_complex()
    int main()
}

class "typedef_test" as HEADER_TYPEDEF_TEST <<header>> #LightGreen
{
    -- Macros --
    + #define TYPEDEF_TEST_H
    -- Struct Fields --
    + int a
    + int b
}

class "complex_example" as HEADER_COMPLEX_EXAMPLE <<header>> #LightGreen
{
    -- Macros --
    + #define COMPLEX_EXAMPLE_H
}

class "geometry" as HEADER_GEOMETRY <<header>> #LightGreen
{
    -- Macros --
    + #define GEOMETRY_H
    -- Functions --
    + #ifndef GEOMETRY_H #define GEOMETRY_H #include "sample.h" #include "math_utils.h" typedef struct triangle_tag { point_t vertices [ 3 ] ; char label [ MAX_LABEL_LEN ] ; } triangle_t ; triangle_t create_triangle()
    + int triangle_area()
}

class "logger" as HEADER_LOGGER <<header>> #LightGreen
{
    -- Macros --
    + #define LOGGER_H
    -- Functions --
    + #ifndef LOGGER_H #define LOGGER_H #include <stdio.h> #include "config.h" typedef enum log_level_tag { LOG_DEBUG = 0 , LOG_INFO , LOG_WARN , LOG_ERROR } log_level_t ; typedef void ( * log_callback_t ) ( log_level_t level , const char * message ) ; void set_log_callback()
    + void log_message()
}

class "stdlib.h" as HEADER_STDLIB_H <<header>> #LightGray
{
}

class "sample" as HEADER_SAMPLE <<header>> #LightGreen
{
    -- Macros --
    + #define SAMPLE_H
    + #define PI
    + #define VERSION
    + #define MIN
    + #define MAX
    -- Global Variables --
    + int MAX_POINTS
    + char * DEFAULT_LABEL
    -- Functions --
    + #ifndef SAMPLE_H #define SAMPLE_H #include <stddef.h> #include "config.h" #define PI 3.14159 #define VERSION "1.0.0" typedef struct point_tag { int x ; int y ; char label [ 32 ] ; } point_t ; typedef enum system_state_tag { STATE_IDLE = 0 , STATE_RUNNING , STATE_ERROR } system_state_t ; extern int calculate_sum()
    + point_t * create_point()
    + void process_point()
    -- Struct Fields --
    + int x
    + int y
    + char label [ 32 ]
}

class "config" as HEADER_CONFIG <<header>> #LightGreen
{
    -- Macros --
    + #define CONFIG_H
    + #define PROJECT_NAME
    + #define MAX_LABEL_LEN
    + #define DEFAULT_BUFFER_SIZE
}

class "stdint.h" as HEADER_STDINT_H <<header>> #LightGray
{
}

class "math_utils" as HEADER_MATH_UTILS <<header>> #LightGreen
{
    -- Macros --
    + #define MATH_UTILS_H
    -- Functions --
    + #ifndef MATH_UTILS_H #define MATH_UTILS_H #include "config.h" typedef double real_t ; typedef int ( * math_op_t ) ( int , int ) ; int add()
    + int subtract()
    + real_t average()
}

class "stdio.h" as HEADER_STDIO_H <<header>> #LightGray
{
}

TYPEDEF_TEST --> HEADER_TYPEDEF_TEST : <<include>>
TYPEDEF_TEST --> HEADER_COMPLEX_EXAMPLE : <<include>>
TYPEDEF_TEST --> HEADER_GEOMETRY : <<include>>
TYPEDEF_TEST --> HEADER_LOGGER : <<include>>
TYPEDEF_TEST --> HEADER_STDLIB_H : <<include>>
HEADER_TYPEDEF_TEST --> HEADER_STDINT_H : <<include>>
HEADER_TYPEDEF_TEST --> HEADER_SAMPLE : <<include>>
HEADER_TYPEDEF_TEST --> HEADER_CONFIG : <<include>>
HEADER_COMPLEX_EXAMPLE --> HEADER_CONFIG : <<include>>
HEADER_COMPLEX_EXAMPLE --> HEADER_LOGGER : <<include>>
HEADER_GEOMETRY --> HEADER_SAMPLE : <<include>>
HEADER_GEOMETRY --> HEADER_MATH_UTILS : <<include>>
HEADER_LOGGER --> HEADER_STDIO_H : <<include>>
HEADER_LOGGER --> HEADER_CONFIG : <<include>>
HEADER_CONFIG --> HEADER_STDINT_H : <<include>>
HEADER_MATH_UTILS --> HEADER_CONFIG : <<include>>
HEADER_SAMPLE --> HEADER_CONFIG : <<include>>
HEADER_SAMPLE --> HEADER_GEOMETRY : <<include>>
HEADER_SAMPLE --> HEADER_LOGGER : <<include>>

@enduml