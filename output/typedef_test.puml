@startuml typedef_test

class "typedef_test" as TYPEDEF_TEST <<source>> #LightBlue
{
    -- Global Variables --
    - MyLen global_length
    - MyBuffer global_buffer
    - MyComplexPtr global_complex
    -- Functions --
    #include "typedef_test.h" #include "complex_example.h" #include "geometry.h" #include "logger.h" #include <stdlib.h> MyLen global_length = 0U ; MyBuffer global_buffer = { 0U , NULL } ; MyComplexPtr global_complex = NULL ; void log_buffer(const MyBuffer * buffer)
    MyInt process_buffer(MyBuffer * buffer)
    int my_callback(MyBuffer * buffer)
    MyComplex * create_complex(MyLen id, MyString name)
    int main()
}

class "typedef_test" as HEADER_TYPEDEF_TEST <<header>> #LightGreen
{
    -- Macros --
    + #define TYPEDEF_TEST_H
    -- Typedefs --
    + typedef uint32_t MyLen
    + typedef int32_t MyInt
    + typedef char * MyString
    + typedef struct MyBuffer
    + typedef int ( * MyCallback ) ( MyBuffer * buffer ) MyCallback
    + typedef struct MyComplex
    + typedef MyComplex * MyComplexPtr
    + typedef enum Color_t
    + typedef enum Status_t
    + typedef struct Point_t
    + typedef struct NamedStruct_t
    + typedef union Number_t
    + typedef union NamedUnion_t
    + typedef MyComplexPtr MyComplexArray [ 10 ] MyComplexArray
    -- Struct Fields --
    + MyLen length
    + MyString data
    + MyLen id
    + MyString name
    + MyCallback callback
    + log_level_t log_level
    + int a
    + int b
}

class "complex_example" as HEADER_COMPLEX_EXAMPLE <<header>> #LightGreen
{
    -- Macros --
    + #define COMPLEX_EXAMPLE_H
    -- Typedefs --
    + typedef struct NestedInfo_t
    + typedef enum CE_Status_t
    + typedef struct ComplexExample_t
    -- Struct Fields --
    + id_t id
    + char description [ MAX_LABEL_LEN ]
    + log_level_t log_level
    + NestedInfo_t info
    + CE_Status_t status
    + int values [ 5 ]
}

class "geometry" as HEADER_GEOMETRY <<header>> #LightGreen
{
    -- Macros --
    + #define GEOMETRY_H
    -- Typedefs --
    + typedef struct triangle_t
    -- Functions --
    + #ifndef GEOMETRY_H #define GEOMETRY_H #include "sample.h" #include "math_utils.h" typedef struct triangle_tag { point_t vertices [ 3 ] ; char label [ MAX_LABEL_LEN ] ; } triangle_t ; triangle_t create_triangle(const point_t * a, const point_t * b, const point_t * c, const char * label)
    + int triangle_area(const triangle_t * tri)
    -- Struct Fields --
    + point_t vertices [ 3 ]
    + char label [ MAX_LABEL_LEN ]
}

class "logger" as HEADER_LOGGER <<header>> #LightGreen
{
    -- Macros --
    + #define LOGGER_H
    -- Typedefs --
    + typedef enum log_level_t
    + typedef void ( * log_callback_t ) ( log_level_t level , const char * message ) log_callback_t
    -- Functions --
    + #ifndef LOGGER_H #define LOGGER_H #include <stdio.h> #include "config.h" typedef enum log_level_tag { LOG_DEBUG = 0 , LOG_INFO , LOG_WARN , LOG_ERROR } log_level_t ; typedef void ( * log_callback_t ) ( log_level_t level , const char * message ) ; void set_log_callback(log_callback_t cb)
    + void log_message(log_level_t level, const char * fmt, . . .)
}

class "stdlib.h" as HEADER_STDLIB_H <<header>> #LightGray
{
}

class "sample" as HEADER_SAMPLE <<header>> #LightGreen
{
    -- Macros --
    + #define SAMPLE_H
    + #define PI
    + #define VERSION
    + #define MIN
    + #define MAX
    -- Typedefs --
    + typedef struct point_t
    + typedef enum system_state_t
    -- Global Variables --
    + int MAX_POINTS
    + char * DEFAULT_LABEL
    -- Functions --
    + #ifndef SAMPLE_H #define SAMPLE_H #include <stddef.h> #include "config.h" #define PI 3.14159 #define VERSION "1.0.0" typedef struct point_tag { int x ; int y ; char label [ 32 ] ; } point_t ; typedef enum system_state_tag { STATE_IDLE = 0 , STATE_RUNNING , STATE_ERROR } system_state_t ; extern int calculate_sum(int a, int b)
    + point_t * create_point(int x, int y, const char * label)
    + void process_point(point_t * p)
    -- Struct Fields --
    + int x
    + int y
    + char label [ 32 ]
}

class "config" as HEADER_CONFIG <<header>> #LightGreen
{
    -- Macros --
    + #define CONFIG_H
    + #define PROJECT_NAME
    + #define MAX_LABEL_LEN
    + #define DEFAULT_BUFFER_SIZE
    -- Typedefs --
    + typedef uint32_t id_t
    + typedef int32_t status_t
}

class "stdint.h" as HEADER_STDINT_H <<header>> #LightGray
{
}

class "math_utils" as HEADER_MATH_UTILS <<header>> #LightGreen
{
    -- Macros --
    + #define MATH_UTILS_H
    -- Typedefs --
    + typedef double real_t
    + typedef int ( * math_op_t ) ( int , int ) math_op_t
    -- Functions --
    + #ifndef MATH_UTILS_H #define MATH_UTILS_H #include "config.h" typedef double real_t ; typedef int ( * math_op_t ) ( int , int ) ; int add(int a, int b)
    + int subtract(int a, int b)
    + real_t average(const int * arr, size_t len)
}

class "stdio.h" as HEADER_STDIO_H <<header>> #LightGray
{
}

class "MyLen" as TYPEDEF_MYLEN_MyLen <<typedef>> #LightYellow
{
    + typedef uint32_t MyLen
}

class "MyInt" as TYPEDEF_MYINT_MyInt <<typedef>> #LightYellow
{
    + typedef int32_t MyInt
}

class "MyString" as TYPEDEF_MYSTRING_MyString <<typedef>> #LightYellow
{
    + typedef char * MyString
}

class "MyBuffer" as TYPEDEF_MYBUFFER_MyBuffer <<typedef>> #LightYellow
{
    + typedef struct MyBuffer
}

class "MyCallback" as TYPEDEF_MYCALLBACK_MyCallback <<typedef>> #LightYellow
{
    + typedef int ( * MyCallback ) ( MyBuffer * buffer ) MyCallback
}

class "MyComplex" as TYPEDEF_MYCOMPLEX_MyComplex <<typedef>> #LightYellow
{
    + typedef struct MyComplex
}

class "MyComplexPtr" as TYPEDEF_MYCOMPLEXPTR_MyComplexPtr <<typedef>> #LightYellow
{
    + typedef MyComplex * MyComplexPtr
}

class "Color_t" as TYPEDEF_COLOR_T_Color_t <<typedef>> #LightYellow
{
    + typedef enum Color_t
}

class "Status_t" as TYPEDEF_STATUS_T_Status_t <<typedef>> #LightYellow
{
    + typedef enum Status_t
}

class "Point_t" as TYPEDEF_POINT_T_Point_t <<typedef>> #LightYellow
{
    + typedef struct Point_t
}

class "NamedStruct_t" as TYPEDEF_NAMEDSTRUCT_T_NamedStruct_t <<typedef>> #LightYellow
{
    + typedef struct NamedStruct_t
}

class "Number_t" as TYPEDEF_NUMBER_T_Number_t <<typedef>> #LightYellow
{
    + typedef union Number_t
}

class "NamedUnion_t" as TYPEDEF_NAMEDUNION_T_NamedUnion_t <<typedef>> #LightYellow
{
    + typedef union NamedUnion_t
}

class "MyComplexArray" as TYPEDEF_MYCOMPLEXARRAY_MyComplexArray <<typedef>> #LightYellow
{
    + typedef MyComplexPtr MyComplexArray [ 10 ] MyComplexArray
}

class "point_t" as TYPEDEF_POINT_T_point_t <<typedef>> #LightYellow
{
    + typedef struct point_t
}

class "system_state_t" as TYPEDEF_SYSTEM_STATE_T_system_state_t <<typedef>> #LightYellow
{
    + typedef enum system_state_t
}

class "id_t" as TYPEDEF_ID_T_id_t <<typedef>> #LightYellow
{
    + typedef uint32_t id_t
}

class "status_t" as TYPEDEF_STATUS_T_status_t <<typedef>> #LightYellow
{
    + typedef int32_t status_t
}

class "triangle_t" as TYPEDEF_TRIANGLE_T_triangle_t <<typedef>> #LightYellow
{
    + typedef struct triangle_t
}

class "real_t" as TYPEDEF_REAL_T_real_t <<typedef>> #LightYellow
{
    + typedef double real_t
}

class "math_op_t" as TYPEDEF_MATH_OP_T_math_op_t <<typedef>> #LightYellow
{
    + typedef int ( * math_op_t ) ( int , int ) math_op_t
}

class "log_level_t" as TYPEDEF_LOG_LEVEL_T_log_level_t <<typedef>> #LightYellow
{
    + typedef enum log_level_t
}

class "log_callback_t" as TYPEDEF_LOG_CALLBACK_T_log_callback_t <<typedef>> #LightYellow
{
    + typedef void ( * log_callback_t ) ( log_level_t level , const char * message ) log_callback_t
}

class "NestedInfo_t" as TYPEDEF_NESTEDINFO_T_NestedInfo_t <<typedef>> #LightYellow
{
    + typedef struct NestedInfo_t
}

class "CE_Status_t" as TYPEDEF_CE_STATUS_T_CE_Status_t <<typedef>> #LightYellow
{
    + typedef enum CE_Status_t
}

class "ComplexExample_t" as TYPEDEF_COMPLEXEXAMPLE_T_ComplexExample_t <<typedef>> #LightYellow
{
    + typedef struct ComplexExample_t
}

TYPEDEF_TEST --> HEADER_TYPEDEF_TEST : <<include>>
TYPEDEF_TEST --> HEADER_COMPLEX_EXAMPLE : <<include>>
TYPEDEF_TEST --> HEADER_GEOMETRY : <<include>>
TYPEDEF_TEST --> HEADER_LOGGER : <<include>>
TYPEDEF_TEST --> HEADER_STDLIB_H : <<include>>
HEADER_TYPEDEF_TEST --> HEADER_STDINT_H : <<include>>
HEADER_TYPEDEF_TEST --> HEADER_SAMPLE : <<include>>
HEADER_TYPEDEF_TEST --> HEADER_CONFIG : <<include>>
HEADER_COMPLEX_EXAMPLE --> HEADER_CONFIG : <<include>>
HEADER_COMPLEX_EXAMPLE --> HEADER_LOGGER : <<include>>
HEADER_GEOMETRY --> HEADER_SAMPLE : <<include>>
HEADER_GEOMETRY --> HEADER_MATH_UTILS : <<include>>
HEADER_LOGGER --> HEADER_STDIO_H : <<include>>
HEADER_LOGGER --> HEADER_CONFIG : <<include>>
HEADER_CONFIG --> HEADER_STDINT_H : <<include>>
HEADER_MATH_UTILS --> HEADER_CONFIG : <<include>>
HEADER_SAMPLE --> HEADER_CONFIG : <<include>>
HEADER_SAMPLE --> HEADER_GEOMETRY : <<include>>
HEADER_SAMPLE --> HEADER_LOGGER : <<include>>
TYPEDEF_MYBUFFER_MyBuffer ..> TYPEDEF_MYLEN_MyLen : <<uses>>
TYPEDEF_MYBUFFER_MyBuffer ..> TYPEDEF_MYSTRING_MyString : <<uses>>
TYPEDEF_MYCALLBACK_MyCallback ..> TYPEDEF_MYBUFFER_MyBuffer : <<uses>>
TYPEDEF_MYCOMPLEX_MyComplex ..> TYPEDEF_MYLEN_MyLen : <<uses>>
TYPEDEF_MYCOMPLEX_MyComplex ..> TYPEDEF_MYSTRING_MyString : <<uses>>
TYPEDEF_MYCOMPLEX_MyComplex ..> TYPEDEF_MYCALLBACK_MyCallback : <<uses>>
TYPEDEF_MYCOMPLEX_MyComplex ..> TYPEDEF_LOG_LEVEL_T_log_level_t : <<uses>>
TYPEDEF_MYCOMPLEXPTR_MyComplexPtr ..> TYPEDEF_MYCOMPLEX_MyComplex : <<uses>>
TYPEDEF_MYCOMPLEXARRAY_MyComplexArray ..> TYPEDEF_MYCOMPLEXPTR_MyComplexPtr : <<uses>>
TYPEDEF_TRIANGLE_T_triangle_t ..> TYPEDEF_POINT_T_point_t : <<uses>>
TYPEDEF_LOG_CALLBACK_T_log_callback_t ..> TYPEDEF_LOG_LEVEL_T_log_level_t : <<uses>>
TYPEDEF_NESTEDINFO_T_NestedInfo_t ..> TYPEDEF_ID_T_id_t : <<uses>>
TYPEDEF_NESTEDINFO_T_NestedInfo_t ..> TYPEDEF_LOG_LEVEL_T_log_level_t : <<uses>>
TYPEDEF_COMPLEXEXAMPLE_T_ComplexExample_t ..> TYPEDEF_NESTEDINFO_T_NestedInfo_t : <<uses>>
TYPEDEF_COMPLEXEXAMPLE_T_ComplexExample_t ..> TYPEDEF_CE_STATUS_T_CE_Status_t : <<uses>>

@enduml