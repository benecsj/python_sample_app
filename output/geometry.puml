@startuml geometry

class "geometry" as GEOMETRY <<source>> #LightBlue
{
-- Functions --
triangle_t create_triangle(const point_t * a, const point_t * b, const point_t * c, const char * label)
int triangle_area(const triangle_t * tri)
}

class "geometry" as HEADER_GEOMETRY <<header>> #LightGreen
{
-- Macros --
+ #define GEOMETRY_H
-- Functions --
+ triangle_t create_triangle(const point_t * a, const point_t * b, const point_t * c, const char * label);
+ int triangle_area(const triangle_t * tri);
}
class "string.h" as HEADER_STRING <<header>> #LightGray
{
}

class "stdlib.h" as HEADER_STDLIB <<header>> #LightGray
{
}

class "sample" as HEADER_SAMPLE <<header>> #LightGreen
{
-- Macros --
+ #define SAMPLE_H
+ #define PI
+ #define VERSION
+ #define MIN(a, b)
+ #define MAX(a, b)
-- Global Variables --
+ int MAX_POINTS
+ char * DEFAULT_LABEL
-- Functions --
+ extern int calculate_sum(int a, int b);
+ extern point_t * create_point(int x, int y, const char * label);
+ extern void process_point(point_t * p);
}
class "math_utils" as HEADER_MATH_UTILS <<header>> #LightGreen
{
-- Macros --
+ #define MATH_UTILS_H
-- Functions --
+ int add(int a, int b);
+ int subtract(int a, int b);
+ real_t average(const int * arr, size_t len);
}
class "triangle_t" as TYPEDEF_TRIANGLE_T <<typedef>> #LightYellow
{
+ point_t 3[ ] vertices
+ char MAX_LABEL_LEN[ ] label
}

class "point_t" as TYPEDEF_POINT_T <<typedef>> #LightYellow
{
+ int x
+ int y
+ char 32[ ] label
}

enum "system_state_t" as TYPEDEF_SYSTEM_STATE_T <<typedef>> #LightYellow
{
STATE_IDLE = 0
STATE_RUNNING
STATE_ERROR
}

class "real_t" as TYPEDEF_REAL_T <<typedef>> #LightYellow
{
+ double
}

class "math_op_t" as TYPEDEF_MATH_OP_T <<typedef>> #LightYellow
{
+ int ( * math_op_t ) ( int , int )
}

GEOMETRY --> HEADER_GEOMETRY : <<include>>
GEOMETRY --> HEADER_STRING : <<include>>
GEOMETRY --> HEADER_STDLIB : <<include>>
HEADER_GEOMETRY --> HEADER_SAMPLE : <<include>>
HEADER_GEOMETRY --> HEADER_MATH_UTILS : <<include>>
HEADER_SAMPLE --> HEADER_GEOMETRY : <<include>>
HEADER_GEOMETRY ..> TYPEDEF_TRIANGLE_T : <<declares>>
TYPEDEF_TRIANGLE_T ..> TYPEDEF_POINT_T : <<uses>>
TYPEDEF_LOG_CALLBACK_T ..> TYPEDEF_LOG_LEVEL_T : <<uses>>
HEADER_SAMPLE ..> TYPEDEF_POINT_T : <<declares>>
HEADER_SAMPLE ..> TYPEDEF_SYSTEM_STATE_T : <<declares>>
HEADER_CONFIG ..> TYPEDEF_ID_T : <<declares>>
HEADER_CONFIG ..> TYPEDEF_STATUS_T : <<declares>>
HEADER_LOGGER ..> TYPEDEF_LOG_LEVEL_T : <<declares>>
HEADER_LOGGER ..> TYPEDEF_LOG_CALLBACK_T : <<declares>>
HEADER_MATH_UTILS ..> TYPEDEF_REAL_T : <<declares>>
HEADER_MATH_UTILS ..> TYPEDEF_MATH_OP_T : <<declares>>

@enduml