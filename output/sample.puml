@startuml sample

class "sample" as SAMPLE <<source>> #LightBlue
{
    -- Macros --
    - #define MAX_SIZE 100U
    - #define DEBUG_MODE 1U
    - #define CALC(x, y) ((x) + (y))
    -- Global Variables --
    - int global_counter
    - char buffer
    - double * global_ptr
    -- Functions --
    int calculate_sum(int a, int b)
    point_t * create_point(int x, int y, const char * label)
    void process_point(point_t * p)
    void demo_triangle_usage()
    int main()
}

class "stdio.h" as HEADER_STDIO <<header>> #LightGray
{
}

class "stdlib.h" as HEADER_STDLIB <<header>> #LightGray
{
}

class "string.h" as HEADER_STRING <<header>> #LightGray
{
}

class "sample" as HEADER_SAMPLE <<header>> #LightGreen
{
    -- Macros --
    + #define SAMPLE_H
    + #define PI 3.14159
    + #define VERSION "1.0.0"
    + #define MIN(a, b) ((a) < (b) ? (a) : (b))
    + #define MAX(a, b) ((a) > (b) ? (a) : (b))
    -- Global Variables --
    + int MAX_POINTS
    + char * DEFAULT_LABEL
    -- Functions --
    + extern int calculate_sum(int a, int b);
    + extern point_t * create_point(int x, int y, const char * label);
    + extern void process_point(point_t * p);
}
class "math_utils" as HEADER_MATH_UTILS <<header>> #LightGreen
{
    -- Macros --
    + #define MATH_UTILS_H
    -- Functions --
    + int add(int a, int b);
    + int subtract(int a, int b);
    + real_t average(const int * arr, size_t len);
}
class "logger" as HEADER_LOGGER <<header>> #LightGreen
{
    -- Macros --
    + #define LOGGER_H
    -- Functions --
    + void set_log_callback(log_callback_t cb);
    + void log_message(log_level_t level, const char * fmt, ...);
}
class "geometry" as HEADER_GEOMETRY <<header>> #LightGreen
{
    -- Macros --
    + #define GEOMETRY_H
    -- Functions --
    + triangle_t create_triangle(const point_t * a, const point_t * b, const point_t * c, const char * label);
    + int triangle_area(const triangle_t * tri);
}
class "config" as HEADER_CONFIG <<header>> #LightGreen
{
    -- Macros --
    + #define CONFIG_H
    + #define PROJECT_NAME "ComplexCProject"
    + #define MAX_LABEL_LEN 64
    + #define DEFAULT_BUFFER_SIZE 256
}
class "stddef.h" as HEADER_STDDEF <<header>> #LightGray
{
}

class "point_t" as TYPEDEF_POINT_T <<typedef>> #LightYellow
{
    + int x
    + int y
    + char 32[ ] label
}

enum "system_state_t" as TYPEDEF_SYSTEM_STATE_T <<typedef>> #LightYellow
{
    STATE_IDLE = 0
    STATE_RUNNING
    STATE_ERROR
}

class "id_t" as TYPEDEF_ID_T <<typedef>> #LightYellow
{
    + typedef uint32_t id_t
}

class "status_t" as TYPEDEF_STATUS_T <<typedef>> #LightYellow
{
    + typedef int32_t status_t
}

class "triangle_t" as TYPEDEF_TRIANGLE_T <<typedef>> #LightYellow
{
    + point_t 3[ ] vertices
    + char MAX_LABEL_LEN[ ] label
}

enum "log_level_t" as TYPEDEF_LOG_LEVEL_T <<typedef>> #LightYellow
{
    LOG_DEBUG = 0
    LOG_INFO
    LOG_WARN
    LOG_ERROR
}

class "log_callback_t" as TYPEDEF_LOG_CALLBACK_T <<typedef>> #LightYellow
{
    + typedef void ( * log_callback_t ) ( log_level_t level , const char * message ) log_callback_t
}

class "real_t" as TYPEDEF_REAL_T <<typedef>> #LightYellow
{
    + typedef double real_t
}

class "math_op_t" as TYPEDEF_MATH_OP_T <<typedef>> #LightYellow
{
    + typedef int ( * math_op_t ) ( int , int ) math_op_t
}

SAMPLE --> HEADER_STDIO : <<include>>
SAMPLE --> HEADER_STDLIB : <<include>>
SAMPLE --> HEADER_STRING : <<include>>
SAMPLE --> HEADER_SAMPLE : <<include>>
SAMPLE --> HEADER_MATH_UTILS : <<include>>
SAMPLE --> HEADER_LOGGER : <<include>>
SAMPLE --> HEADER_GEOMETRY : <<include>>
HEADER_SAMPLE --> HEADER_STDDEF : <<include>>
HEADER_SAMPLE --> HEADER_CONFIG : <<include>>
HEADER_MATH_UTILS --> HEADER_CONFIG : <<include>>
HEADER_LOGGER --> HEADER_STDIO : <<include>>
HEADER_LOGGER --> HEADER_CONFIG : <<include>>
HEADER_GEOMETRY --> HEADER_SAMPLE : <<include>>
HEADER_GEOMETRY --> HEADER_MATH_UTILS : <<include>>
HEADER_CONFIG --> HEADER_STDDEF : <<include>>
TYPEDEF_TRIANGLE_T ..> TYPEDEF_POINT_T : <<uses>>
TYPEDEF_LOG_CALLBACK_T ..> TYPEDEF_LOG_LEVEL_T : <<uses>>
HEADER_SAMPLE ..> TYPEDEF_POINT_T : <<declares>>
HEADER_SAMPLE ..> TYPEDEF_SYSTEM_STATE_T : <<declares>>
HEADER_MATH_UTILS ..> TYPEDEF_REAL_T : <<declares>>
HEADER_MATH_UTILS ..> TYPEDEF_MATH_OP_T : <<declares>>
HEADER_LOGGER ..> TYPEDEF_LOG_LEVEL_T : <<declares>>
HEADER_LOGGER ..> TYPEDEF_LOG_CALLBACK_T : <<declares>>
HEADER_GEOMETRY ..> TYPEDEF_TRIANGLE_T : <<declares>>

@enduml